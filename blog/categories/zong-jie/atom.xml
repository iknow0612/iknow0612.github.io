<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 总结 | Outprog Blog]]></title>
  <link href="http://outprog.github.io/blog/categories/zong-jie/atom.xml" rel="self"/>
  <link href="http://outprog.github.io/"/>
  <updated>2015-12-18T14:02:58+08:00</updated>
  <id>http://outprog.github.io/</id>
  <author>
    <name><![CDATA[Xiongwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[2015年度工作总结]]></title>
    <link href="http://outprog.github.io/blog/2015/12/18/2015nian-du-gong-zuo-zong-jie/"/>
    <updated>2015-12-18T20:57:59+08:00</updated>
    <id>http://outprog.github.io/blog/2015/12/18/2015nian-du-gong-zuo-zong-jie</id>
    <content type="html"><![CDATA[<p>本年度整体工作汇报如下：</p>

<h3>年度工作项目汇总</h3>

<hr />

<h4>天津分行微信公众平台（2015/3/7）</h4>

<p>根据零售业务部需求定制开发分行微信公众平台。利用微信公众平台服务客户，更好的引导客户了解我行企业文化，参与我行互动活动。</p>

<h4>客户经理考核系统</h4>

<ul>
<li>2015年考核办法升级（2015/6/5)  <br/>
  根据2015年考核办法，对客户经理考核系统进行升级。  <br/>
 <!--more-->

<ul>
<li>新增“五级分类”客户名单导入功能；</li>
<li>新增“分行自开自贴银承汇票”清单导入功能；</li>
<li>升级贷款分值、贷款经济成本、表外经济成本、银承占用费、中收分值、存贷比加扣成本的分值计算模块；</li>
<li>升级计算管和历史修改模块。</li>
</ul>
</li>
<li>考核分值计算升级（2015/6/29）  <br/>
  根据2015年考核办法，对客户经历考核系统进行变更调整，升级核分值计算模块。</li>
<li>国际业务中收录入升级（2015/7/1）  <br/>
  由于业务条线需求变更，将PL52748对应的科目号为“511-07-06”的外汇汇款业务调整为手工及系统双线操作，对录入权限进行变更。</li>
<li>开发模拟利润模块（2015/7/24）  <br/>
  根据业务部门需求开发模拟利润考核模块。

<ul>
<li>新增模拟利润计算模块；</li>
<li>新增模拟利润排行；</li>
<li>新增团队模拟利润汇总；</li>
<li>新增全行模拟利润汇总；</li>
<li>新增模拟利润明细，包括：存贷款模拟利润、贷款经济成本、存贷比加扣成本、中收模拟利润、表外模拟利润。</li>
</ul>
</li>
<li>外币FTP变更，科目号变更（2015/10/20）  <br/>
  修改系统中外币FTP取值范围；增加科目号。

<ul>
<li>根据当前外币FTP数据情况，修改系统中外币FTP取值范围；</li>
<li>新增科目号205-01-xx、235-16-01、235-16-03。</li>
</ul>
</li>
<li>客户经理考核系统功能变更及添加（2015/12/10）  <br/>
  根据总行数据变更要求及分行考核需求，对客户经理考核系统进行相应的功能添加和变更。

<ul>
<li>由于数据集市客户号变更，对分值计算进行全面升级调整；</li>
<li>模拟利润模块中添加批量查询功能；</li>
<li>对客户经理统计模块进行升级改造，对客户经理上年末数据进行回溯计算。  <br/>
.</li>
</ul>
</li>
</ul>


<h4>营销活动礼品发放系统</h4>

<p>为信用卡中心开发营销活动礼品发放系统，协助信用卡中心完成“7周年行庆信用卡客户回馈活动”。</p>

<h3>研发综合管理平台2.0</h3>

<hr />

<p>在保证完成行内业务需求的前提下，我对综合管理平台进行了全面的改造升级。通过为期3个月的开发设计工作，成功研发出新综合管理平台2.0。2015年7月以后的开发项目，包括客户经理考核系统－模拟利润模块、营销活动礼品发放系统等，统一使用新综合管理平台2.0进行开发，并取得了良好的效果。</p>

<p>新综合管理平台2.0提供更整洁高效的系统界面和完善的报表功能：</p>

<p><img class="img-responsive" src="/images/post/20151218/zhgl1.jpg"></p>

<p>新综合管理平台2.0提供完整的图表解决方案：</p>

<p><img class="img-responsive" src="/images/post/20151218/zhgl2.jpg"></p>

<h3>工作总结</h3>

<hr />

<p>经过2015年在软件开发方面的努力工作，在实际项目中分行软件开发流程更加规范化，同时本人的软件开发技术也得以积淀。使分行软件开发足以应对大型复杂项目，对上线系统的维护和升级也更加得心应手。</p>

<p>回望2015年，丰收充实。4月份到总行科技部进行培训学习，在培训课程中收获颇丰。培训之际，结识了兄弟分行的开发同事们，大家相互交流，共同进步。通过培训课程学到的软件开发知识，对分行管理平台进行开发升级，顺利完成了新综合管理平台2.0的研发工作。2015年完成了业务部门的各项需求，积累了大量实践经验。这一年，绝对是丰收的一年。</p>

<p>展望2016年，业务部门包括：投行部、零售业务部都有进行考核系统开发的意愿，2016年将会是充满挑战的一年，希望能和各位业务部门的同事密切合作，进行各项新系统的研发工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《计算的本质:深入剖析程序和计算机》第一部分总结]]></title>
    <link href="http://outprog.github.io/blog/2015/09/17/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji--di-yi-bu-fen-zong-jie/"/>
    <updated>2015-09-17T23:58:48+08:00</updated>
    <id>http://outprog.github.io/blog/2015/09/17/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji--di-yi-bu-fen-zong-jie</id>
    <content type="html"><![CDATA[<p>大学时对计算理论知之甚少，计算理论、编译原理都是为了应试而学，所用的课本也纯粹是乏味的理论，让人很难提起兴趣。而国外一些权威课本，可能知识总结不算精粹，讲解过程也掺杂着各种比喻，甚至是“过多”的讲述背景故事，但若是真的对这门学科感兴趣，这样的课本也许才是更好的选择。学习这样的课本，不仅仅能让人理解理论知识，更能了解这些理论知识的由来和意义。</p>

<p>好了，废话不多说。读完第一部分-程序和机器，稍作概述：</p>

<!--more-->


<h3>确定性有限自动机</h3>

<p>确定性有限自动机有若干状态，其中包括开始状态和接受状态（结束状态）。通过接收某个字符，使自动机的状态进行转换。接收指定的字符可以使自动机达到最终的接受状态，其他字符则可能永远无法达到接受状态。</p>

<p>确定性有限自动机在读入字符的时候，最终所处的状态一定是完全确定的，它不存在冲突也没有遗漏。</p>

<h3>非确定性有限自动机</h3>

<p>非确定性有限自动机去除了确定性有限自动机的确定性约束。</p>

<p>非确定性有限自动机可以同一时刻处于多个状态，它在进行某个字符读取时，可能处于状态2，也可能处于状态3。对这些可能的状态都应该进行记录。当非确定有限自动机同一时刻的状态中，存在一个接受状态时，该机器就认为接受读取到的字符串。</p>

<h3>确定性下推自动机</h3>

<p>下推自动机是在有限自动机的基础上进行了功能扩展。下推自动机主要是对存储部分进行了扩展，增加了一个栈对读取的字符进行弹入弹出操作。</p>

<p>确定性下推自动机的约束是“不能存在冲突”：不能在任何状态上，由于冲突的规则而使机器的状态在下一次移动中有二意性。</p>

<p>确定性下推自动机可以做括号匹配，能识别例如"(())()()(()())&ldquo;这样的字符串，进行这样的字符串识别的时候，可以认为读取&rdquo;(&ldquo;时进行入栈操作，读取&rdquo;)&ldquo;时进行出栈。但是这样的计算仍然很有局限性，因为他的栈其实只是一个计数器，并且它的规则只区分“栈为空”或“栈不为空”。因此想用用确定性下推自动机做回文识别是很困难的。</p>

<h3>非确定性下推自动机</h3>

<p>为突破确定性下推自动机的局限，使下推自动机能识别回文，我们可以去掉下推自动机的确定性约束。没有确定性约束的下推自动机，顾名思义就叫做非确定性下推自动机。</p>

<p>一台非确定性下推自动机会记录同时存在的多种状态，每个状态也有自己的存储栈。当非确定性下推自动机识别字符串时，其中某条状态转换为接受状态，就认为该字符串是可识别的。</p>

<p>非确定性下推自动机和确定性下推自动机是不等价的，非确定性下推自动机不能转化成确定性下推自动机，因为非确定下推自动机的每种可能状态都有自身的栈信息，确定性下推自动机无法把所有可能的栈组合成一个栈。</p>

<h3>图灵机</h3>

<p>将一条无限长的纸带穿过黑盒子，黑盒子可以左右移动纸带并修改在黑盒子中那部分纸带上的内容（擦除原有内容，再写入新的内容），黑盒子内部可以存储某些状态。图灵机的运作步骤如下：</p>

<pre><code>1. 黑盒子对纸带上的内容进行读取，读取的内容可能会改变黑盒子的内部状态
2. 黑盒子根据最新的内部状态，对纸带进行写入和移动
3. 当完成移动后，纸带原先的部分必定移出黑盒子，另外一部分会进入黑盒子，回到步骤1，黑盒子对新进入的纸带重复以上操作。
</code></pre>

<p><img class="img-responsive" src="/images/post/20150917/turing-machine.jpg"></p>

<p>图灵机是目前为止最全能的计算机器，只需要通过以上简单的原理，可以实现任何现代计算机的计算功能。图灵机在添加一些附加功能（比如存储、子例程、多条纸带）后，可以提升一定的便捷性，但是不不能提升自身的计算能力。</p>

<p>存在一种通用图灵机（UTM，Universal Turing Machine），它可以在自身的纸带上模拟出任何一种图灵机，包括通用图灵机。通俗的说就是可以在图灵机上面模拟出一台虚拟的图灵机，这台虚拟的图灵机上还可以模拟出图灵机。</p>

<hr />

<p>不得不感叹这些先贤们惊人的创造力！乍一看我们日常使用的计算机和这些理论相去甚远。很难想象我们使用的复杂计算机就是在这些基础理论上一点一滴的建立起来的。</p>

<p>作为一名 WEB 开发人员，可能研究这些理论并没有多大的作用。现代高级编程技术让我们不需要任何底层理论就能写出出色的程序，但是求知欲不会停止，想去探索就应该去探索。有句话说得好——如果你想从头开始制作苹果派，必须先创造整个宇宙。</p>

<p>认真去做一件事时，是需要某种信念的。</p>
]]></content>
  </entry>
  
</feed>
