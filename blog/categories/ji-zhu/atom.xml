<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | Outprog Blog]]></title>
  <link href="http://iknow0612.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://iknow0612.github.io/"/>
  <updated>2015-09-29T17:19:59+08:00</updated>
  <id>http://iknow0612.github.io/</id>
  <author>
    <name><![CDATA[Xiongwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于写代码]]></title>
    <link href="http://iknow0612.github.io/blog/2015/09/29/guan-yu-xie-dai-ma/"/>
    <updated>2015-09-29T17:15:06+08:00</updated>
    <id>http://iknow0612.github.io/blog/2015/09/29/guan-yu-xie-dai-ma</id>
    <content type="html"><![CDATA[<p>对于写代码哪些事情，还有太多要去学习的东西。没有摸索过设计模式，没有重构过太多东西，优美的代码艺术更是谈不上，只是简单的写写而已。</p>

<p>写过各种排序，写过树，写过神经网络，在算法的世界，一切都让人感到惊奇。去九度刷过题，废寝忘食，也去 Codewars 刷过 star，跻身排行榜。解决各种问题，获得各种成就，一切不为别的，就像是一个又一个游戏关卡，只为过关获取成就。</p>

<p>写过 C，写过 C++，写过 PHP，写过 JAVA，写过 R，写过 Javascript，写过 Ruby，写过 shell，最近，还写写 Swift。C/C++ 纠结的指针，C++ 的继承、派生、多态、虚函数、运算符重载各种特性绕脑。写过 Ruby 后，才真是不想再写其他语言了，但是仍然避免不了用各种语言，历史上的架构原因，不同语言开发的优秀工具，都必须在特定语言环境下使用。然而各种语言，毕竟殊途同归。</p>

<p>写代码，要么往上写，要么往下写。所谓往上写，就是去注重代码质量，注重抽象、设计和性能，注重一切工程上的问题；所谓往下写，就是去理解语言的魅力，理解语言的实现，理解语言和计算这门艺术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《计算的本质:深入剖析程序和计算机》第一部分总结]]></title>
    <link href="http://iknow0612.github.io/blog/2015/09/17/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji--di-yi-bu-fen-zong-jie/"/>
    <updated>2015-09-17T23:58:48+08:00</updated>
    <id>http://iknow0612.github.io/blog/2015/09/17/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji--di-yi-bu-fen-zong-jie</id>
    <content type="html"><![CDATA[<p>大学时对计算理论知之甚少，计算理论、编译原理都是为了应试而学，所用的课本也纯粹是乏味的理论，让人很难提起兴趣。而国外一些权威课本，可能知识总结不算精粹，讲解过程也掺杂着各种比喻，甚至是“过多”的讲述背景故事，但若是真的对这门学科感兴趣，这样的课本也许才是更好的选择。学习这样的课本，不仅仅能让人理解理论知识，更能了解这些理论知识的由来和意义。</p>

<p>好了，废话不多说。读完第一部分-程序和机器，稍作概述：</p>

<!--more-->


<h3>确定性有限自动机</h3>

<p>确定性有限自动机有若干状态，其中包括开始状态和接受状态（结束状态）。通过接收某个字符，使自动机的状态进行转换。接收指定的字符可以使自动机达到最终的接受状态，其他字符则可能永远无法达到接受状态。</p>

<p>确定性有限自动机在读入字符的时候，最终所处的状态一定是完全确定的，它不存在冲突也没有遗漏。</p>

<h3>非确定性有限自动机</h3>

<p>非确定性有限自动机去除了确定性有限自动机的确定性约束。</p>

<p>非确定性有限自动机可以同一时刻处于多个状态，它在进行某个字符读取时，可能处于状态2，也可能处于状态3。对这些可能的状态都应该进行记录。当非确定有限自动机同一时刻的状态中，存在一个接受状态时，该机器就认为接受读取到的字符串。</p>

<h3>确定性下推自动机</h3>

<p>下推自动机是在有限自动机的基础上进行了功能扩展。下推自动机主要是对存储部分进行了扩展，增加了一个栈对读取的字符进行弹入弹出操作。</p>

<p>确定性下推自动机的约束是“不能存在冲突”：不能在任何状态上，由于冲突的规则而使机器的状态在下一次移动中有二意性。</p>

<p>确定性下推自动机可以做括号匹配，能识别例如"(())()()(()())&ldquo;这样的字符串，进行这样的字符串识别的时候，可以认为读取&rdquo;(&ldquo;时进行入栈操作，读取&rdquo;)&ldquo;时进行出栈。但是这样的计算仍然很有局限性，因为他的栈其实只是一个计数器，并且它的规则只区分“栈为空”或“栈不为空”。因此想用用确定性下推自动机做回文识别是很困难的。</p>

<h3>非确定性下推自动机</h3>

<p>为突破确定性下推自动机的局限，使下推自动机能识别回文，我们可以去掉下推自动机的确定性约束。没有确定性约束的下推自动机，顾名思义就叫做非确定性下推自动机。</p>

<p>一台非确定性下推自动机会记录同时存在的多种状态，每个状态也有自己的存储栈。当非确定性下推自动机识别字符串时，其中某条状态转换为接受状态，就认为该字符串是可识别的。</p>

<p>非确定性下推自动机和确定性下推自动机是不等价的，非确定性下推自动机不能转化成确定性下推自动机，因为非确定下推自动机的每种可能状态都有自身的栈信息，确定性下推自动机无法把所有可能的栈组合成一个栈。</p>

<h3>图灵机</h3>

<p>将一条无限长的纸带穿过黑盒子，黑盒子可以左右移动纸带并修改在黑盒子中那部分纸带上的内容（擦除原有内容，再写入新的内容），黑盒子内部可以存储某些状态。图灵机的运作步骤如下：</p>

<pre><code>1. 黑盒子对纸带上的内容进行读取，读取的内容可能会改变黑盒子的内部状态
2. 黑盒子根据最新的内部状态，对纸带进行写入和移动
3. 当完成移动后，纸带原先的部分必定移出黑盒子，另外一部分会进入黑盒子，回到步骤1，黑盒子对新进入的纸带重复以上操作。
</code></pre>

<p><img src="/images/post/20150917/turing-machine.jpg" alt="" /></p>

<p>图灵机是目前为止最全能的计算机器，只需要通过以上简单的原理，可以实现任何现代计算机的计算功能。图灵机在添加一些附加功能（比如存储、子例程、多条纸带）后，可以提升一定的便捷性，但是不不能提升自身的计算能力。</p>

<p>存在一种通用图灵机（UTM，Universal Turing Machine），它可以在自身的纸带上模拟出任何一种图灵机，包括通用图灵机。通俗的说就是可以在图灵机上面模拟出一台虚拟的图灵机，这台虚拟的图灵机上还可以模拟出图灵机。</p>

<hr />

<p>不得不感叹这些先贤们惊人的创造力！乍一看我们日常使用的计算机和这些理论相去甚远。很难想象我们使用的复杂计算机就是在这些基础理论上一点一滴的建立起来的。</p>

<p>作为一名 WEB 开发人员，可能研究这些理论并没有多大的作用。现代高级编程技术让我们不需要任何底层理论就能写出出色的程序，但是求知欲不会停止，想去探索就应该去探索。有句话说得好——如果你想从头开始制作苹果派，必须先创造整个宇宙。</p>

<p>认真去做一件事时，是需要某种信念的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress创建博客, Google CDN被墙的解决办法]]></title>
    <link href="http://iknow0612.github.io/blog/2015/09/16/octopresschuang-jian-bo-ke/"/>
    <updated>2015-09-16T16:51:14+08:00</updated>
    <id>http://iknow0612.github.io/blog/2015/09/16/octopresschuang-jian-bo-ke</id>
    <content type="html"><![CDATA[<p>官方文档提供 Octopress 创建博客的基本步骤：<br/>
<a href="http://octopress.org/docs/">http://octopress.org/docs/</a></p>

<p>使用官方文档，创建过程还算比较顺利，很快就可以在 github 上运行起来，但是运行后，还是遇到了一个特别的问题：<br/>
国内被墙后无法加载 google 提供的 jquery 文件和字体文件，导致 blog 打开速度超慢</p>

<!--more-->


<h2>Google 被墙，无法加载指定 jquery 和字体</h2>

<p>由于天朝无所不能的墙的存在，我们甚至上个 blog 都得“翻一翻”，对我们技术人员“翻一翻”到是好说，可是很多普通老百姓还是很难实现“翻一翻”的。所以，我们的 blog 是需要避免这种尴尬的情形的。<br/>
当然，不仅仅是 blog，我们在使用一些国外优秀的前端页面时，也会遇到这种尴尬的情形。如果你发现你的页面需要很长的时间才能打开，那可能就是遇到了这个问题。</p>

<p>使用 Chrome 浏览器的 “Inspect Element”－“Network” 可以很方便的查看到被墙掉的文件：</p>

<p><img src="/images/post/20150916/chrome_network_failed.png" alt="" /></p>

<p>可以看出来，被墙文件的共同特点是路径名中都包含 googleapis.com, 很显然 googleapis.com 已经被墙掉，内网无法访问。现在要做的就是把这些墙掉的文件替换掉。回到 octopress 目录，使用如下命令查找文档中包含 &ldquo;googleapis.com&rdquo; 的文件：</p>

<pre><code>find ./ -name "*" | xargs grep "googleapis.com"
</code></pre>

<p>通过该命令，可以很方便的定位到文件夹中（包括子目录）哪些文档的内容包含某串字符。在这里，我们可以看到 public 和 source 文件夹中都有包含字符串 &ldquo;googleapis.com&rdquo; 的文件， public 中的文件是由 source 中的文件生成的，因此只需要更改 source 中的文件就可以。</p>

<p>这里我们只需要更改两个文件</p>

<p><em>source/_includes/head.html</em>
原文本</p>

<p>```</p>

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>


<pre><code>替换后的文本（替换为 baidu cdn)
</code></pre>

<script src="//libs.baidu.com/jquery/1.9.1/jquery.min.js"></script>


<p>```
<em>source/_includes/custom/head.html</em></p>

<p>这里我直接将所有内容注释掉了，当然你也可以翻 墙后把 google 提供的字体下载到 github 目录中，将此处的路径改为你的地址。</p>

<p>重新生成并部署，就不会遇到这个问题了。</p>

<p>ps: _config.yml 中 twitter 开启时也存在 twitter 需要翻墙连接的情况，把 twitter 关闭后可以解决。</p>
]]></content>
  </entry>
  
</feed>
