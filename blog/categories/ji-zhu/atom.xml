<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 技术 | Outprog Blog]]></title>
  <link href="http://outprog.github.io/blog/categories/ji-zhu/atom.xml" rel="self"/>
  <link href="http://outprog.github.io/"/>
  <updated>2017-10-24T11:49:54+08:00</updated>
  <id>http://outprog.github.io/</id>
  <author>
    <name><![CDATA[Xiongwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[银行业白皮书：区块链的五大应用场景]]></title>
    <link href="http://outprog.github.io/blog/2017/10/24/blockchain-five-app/"/>
    <updated>2017-10-24T11:10:35+08:00</updated>
    <id>http://outprog.github.io/blog/2017/10/24/blockchain-five-app</id>
    <content type="html"><![CDATA[<h3>场景一:数字货币:提高货币发行及使用的便利性</h3>

<p>比特币的崛起颠覆了人类对货币的概念。比特币及其他数字货币的出现与扩展正在改变人类使用货币的方式。从过去人类使用实物交易，到发展物理货币及后来的信用货币，都是随着人类的商业行为及社会发展不断演进。随着电子金融及电子商务的崛起，数字货币安全、便利、低交易成本的独特性，更适合基于网络的商业行为，将来有可能取代物理货币的流通。</p>

<p>以比特币为代表的数字货币目前已在欧美国家获得相当程度的市场接受，不但能在商户用比特币支付商品，更是衍生出比特币的借记卡与ATM机等应用产品。数字货币与法定货币之间交换的交易平台也应运而生，例如美国最大的比特币交易平台Coinbase目前支持美金、欧元、英镑及加拿大币与比特币之间的兑换;中国的交易平台OKCoin及火币也支持人民币与比特币的交易;比特币与法定货币之间的庞大交易量与流动性足以被视为一种国际通行货币。正是比特币网络的崛起，让社会各界注意到其背后的分布式账本区块链技术，并逐渐在数字货币外的众多场景获得开发应用。</p>

<p>国家发行数字货币将成趋势。2015年厄瓜多尔率先推出国家版数字货币，不但能减少发行成本及增加便利性，还能让偏远地区无法拥有银行资源的民众也能通过数字化平台，获得金融服务。突尼斯也根据区块链的技术发行国家版数字货币，除了让国民通过数字货币买卖商品，还能缴付水电费账单等，结合区块链分布式账本的概念，将交易纪录记载于区块链中，方便管理。</p>

<p>同时，其他许多国家也在探讨发行数字货币的可行性。目前，包括瑞典、澳大利亚及俄罗斯正在研讨发展数字货币的计划。英国央行正委托伦敦大学学院设计一套数字货币RSCoin进行试验,预期通过央行发行的数字货币来提高整体金融体系的安全性与效率。中国央行也在2016年1月召开数字货币研讨会，提出争取早日推出央行发行的数字货币。各国央行均认识到数字货币能够替代实物现金，降低传统纸币发行、流通的成本，提高支付结算的便利性;并增加经济交易透明度，减少洗钱、逃漏税等违法犯罪行为，提升央行对货币供给和货币流通的控制力;同时，通过发展数字货币背后的区块链技术应用，扩展到整个金融业及其他领域，确保资金和信息的安全，提升社会整体效能。</p>

<h3>场景二:跨境支付与结算:实现点到点交易，减少中间费用</h3>

<p>当前的跨境支付结算时间长、费用高、又必须通过多重中间环节。拥有一个可信任的中介角色在现今的跨境交易非常重要，当跨境汇款与结算的方式日趋复杂，付款人与收款人之间所仰赖的第三方中介角色更显得极其重要。每一笔汇款所需的中间环节不但费时，而且需要支付大量的手续费，其成本和效率成为跨境汇款的瓶颈所在。如因每个国家的清算程序不同，可能导致一笔汇款需要2至3天才能到帐，效率极低，在途资金占用量极大。</p>

<p>区块链将可摒弃中转银行的角色，实现点到点快速且成本低廉的跨境支付。通过区块链的平台，不但可以绕过中转银行，减少中转费用，还因为区块链安全、透明、低风险的特性，提高了跨境汇款的安全性，以及加快结算与清算速度，大大提高资金利用率。未来，银行与银行之间可以不再通过第三方，而是通过区块链技术打造点对点的支付方式。省去第三方金融机构的中间环节，不但可以全天候支付、实时到账、提现简便及没有隐形成本，也有助于降低跨境电商资金风险及满足跨境电商对支付清算服务的及时性、便捷性需求。</p>

<p>根据麦肯锡的测算，从全球范围看，区块链技术在B2B跨境支付与结算业务中的应用将可使每笔交易成本从约26美元下降到15美元，其中约75%为中转银行的支付网络维护费用，25%为合规、差错调查，以及外汇汇兑成本(图7)。</p>

<p>Ripple的跨账本协议帮助银行间快速结算。成立于美国的Ripple为一家利用类区块链概念发展跨境结算的金融科技公司，它构建了一个没有中央节点的分布式支付网络，希望提供一个能取代SWIFT(环球同业银行金融电讯协会)网络的跨境转账平台，打造全球统一网络金融传输协议。Ripple的跨账本协议(interledgerprotocol)可说是让参与协议的各方都能看到同样的一本账本，通过该公司的网络，银行客户可以实现实时的点对点跨国转账，不需中心组织管理，且支持各国不同货币。如果Ripple协议成为了金融体系的标准协议，在网络中的各方都能任意转账货币，支付就会像收发电子邮件一样快捷、便宜，最重要的是没有所谓的跨行异地以及跨国支付费用。目前全球已有17个国家的银行加入合作，共同参与Ripple为金融机构打造的解决方案。</p>

<p>Circle致力于发展C2C跨境支付平台。Circle是一家开发比特币钱包的数字货币初创公司，正致力于通过比特币后台网络的区块链技术，使国家货币之间的资金转移更加简单和便宜。Circle在2016年获得英国政府颁发的首张电子货币牌照，允许Circle客户在美元与英镑之间进行即时转账。考虑到该电子货币牌照在整个欧盟都有效，预计很快欧元也会加入。</p>

<p>除了上述两家金融科技公司，Chain,Ethereum,IBM,Microsoft等公司也都在利用区块链技术发展跨境支付与结算的技术。预计在不久的将来，金融体系现有的传统交易模式将被高效能、高安全性及成低本的颠覆性技术所替代。</p>

<h3>场景四:证券发行与交易:实现准实时资产转移，加速交易清算速度</h3>

<p>证券的发行与交易的流程手续繁杂且效率低下。一般公司的证券发行，必须先找到一家券商，公司与证券发行中介机构签订委托募集合同，完成繁琐的申请流程后，才能寻求投资者认购。以美国的交易模式为例，证券一旦上市后，交易更是极为低效，证券交易日和交割日之间存在3天的时间间隔。</p>

<p>区块链技术使得金融交易市场的参与者享用平等的数据来源，让交易流程更加公开、透明、有效率。通过共享的网络系统参与证券交易，使得原本高度依赖中介的传统交易模式变为分散的平面网络交易模式。这种革命性交易模式在西方金融市场的实践中已经显现出三大优势:首先，能大幅度减少了证券交易成本，区块链技术的应用可使证券交易的流程更简洁、透明、快速，减少重复功能的IT系统，提高市场运转的效率;其次，区块链技术可准实时地记录交易者的身份、交易量等关键信息，有利于证券发行者更快速清晰地了解股权结构，提升商业决策效率;公开透明又可追踪的电子记录系统同时减少了暗箱操作、内幕交易的可能性，有利于证券发行者和监管部门维护市场。第三，区块链技术使得证券交易日和交割日时间间隔从1-3天缩短至10分钟，减少了交易的风险，提高了交易的效率和可控性。</p>

<p>Chain与Nasdaq推出私募股权市场交易平台。2015年10月，Nasdaq在拉斯维加斯的Money20/20大会上，正式公布了与Chain搭建区块链平台Linq——首个通过区块链平台进行数字化证券产品管理的系统平台。对于股票交易者而言，区块链可以消除对基于纸笔或者电子表格的记录依赖的需求，减少交易的人为差错，提高交易平台的透明度和可追踪性。对股票的发行公司而言，Linq实现了更好的管理股票数据的功能，让纳斯达克在私募股权市场中为创业者和风险投资者提供更好的服务。</p>

<p>DigitalAssetHoldings(DAH)即将为澳大利亚证券交易所设计清算和结算系统。澳大利亚证券交易所在2015年表示，将设计一套新系统取代所有的核心技术系统以提升结算速度。美国区块链公司DAH在400家投标者中，拿到了这项计划合同。DAH所开发的技术目标将允许所有的参与者，在同一个数据库中进行实时的资产交易;它能够让数字资产在交易的对手方之间进行转移而无需任何中央机构来负责记录交易，因而达到实时交易效果，实现结算时间由当前的两个工作日减少到数分钟。</p>

<p>除了美国Nasdaq及澳大利亚证券市场外，芝加哥商品交易所、迪拜多种商品中心、德国、伦敦、日本、韩国等多国的证交所都已经开始发展区块链技术的应用。中国近来也由上海证券交易所牵头组织ChinaLedger联盟,组织国内商品交易所，实验由区块链发展场外交易平台。</p>

<h3>场景五:客户征信与反欺诈:降低法律合规成本，防止金融犯罪</h3>

<p>银行的客户征信及法律合规的成本不断增加。过去几年各国商业银行为了满足日趋严格的监管要求，不断投入资源加强信用审核及客户征信，以提升反欺诈、反洗钱抵御复杂金融衍生品过度交易导致的系统性风险的成效。2014年，UBS为了应对新的监管要求，增加了约10亿美元的支出;而汇丰集团在2013至2015年间，法律合规部门的员</p>

<p>工人数从2000多人增至7000多名。为提高交易的安全性及符合法规要求，银行投入了相当的金钱与人力，已经成为极大的成本负担。</p>

<p>记载于区块链中的客户信息与交易纪录有助于银行识别异常交易并有效防止欺诈。区块链的技术特性可以改变现有的征信体系，在银行进行“认识你的客户”(KYC)时，将不良纪录客户的数据储存在区块链中。客户信息及交易记录不仅可以随时更新，同时，在客户信息保护法规的框架下，如果能实现客户信息和交易纪录的自动化加密关联共享，银行之间能省去许多KYC的重复工作。银行也可以通过分析和监测在共享的分布式帐本内客户交易行为的异常状态，及时发现并消除欺诈行为。</p>

<p>Chainalysis为银行设计反欺诈监测系统。原本为专门打击利用数字货币洗钱和欺诈行为的初创公司Chainalysis，现在也为银行设计区块链上的异常交易行为监测与分析系统。通过监测公开式账本上的交易寻找不法行为，帮助银行反洗钱与反欺诈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《计算的本质:深入剖析程序和计算机》后记总结]]></title>
    <link href="http://outprog.github.io/blog/2016/03/02/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji-hou-ji-zong-jie/"/>
    <updated>2016-03-02T11:07:17+08:00</updated>
    <id>http://outprog.github.io/blog/2016/03/02/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji-hou-ji-zong-jie</id>
    <content type="html"><![CDATA[<ul>
<li>任何人都可以设计和实现一种编程语言。语法和语意的基本思想是简单的，Treetop这样的工具可以处理枯燥的细节。</li>
<li>每一个计算机程序都是一个数学对象。按句法来说，一个程序只是一个大数；语义上来说，它可能代表一个数学函数，或者一个能被形式化规约规则操纵的分层结构。这意味着数学上的许多技术和成果，如 Kleene 规约理论或者 Godel 不完备定理，都能等价地应用到程序上。</li>
<li>计算，最初被描述为只是“一台计算机做的事”，已经被证明是某种自然力量。很容易把计算想象为一个复杂的人类发明，它只能由对许多复杂部分进行特殊设计的系统来执行，但在系统中还可以看到支持它没那么复杂。因此，计算不是一个枯燥的只是发生在微处理器中的人工过程，而是一个在许多不同地点以不同方式发生的普遍现象。</li>
</ul>


<!--more-->


<ul>
<li>计算不是全有或全无的。不同的机器拥有不同的计算能力，这给了我们用途上的连续性：DFA 和 NFA 有有限的能力，DPDA 更强大，NPDA 还更强大，而图灵机是我们知道的最强大的机器。</li>
<li>抽象的编码和级别对于利用计算能力必不可少。计算机是维护抽象宝塔的机器，从非常低层次的半导体物理学开始，上升到层次高得多的多点触控图形用户界面。为了让计算有用，我们需要能把现实世界中复杂的思想编码成机器能处理的简单的形式，然后再把结果解码回有意义的高层表示。</li>
<li>计算能做的事情是有限的。我们不知道如何构建比图灵机能力更强的机器，但确实存在图灵机无法解决的问题，而这些问题包括我们所写程序的信息。可以利用模糊的或者不完整的答案处理这些限制，以便质疑我们程序的行为。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浏览器的 New Date('yyyy.mm.dd') 坑]]></title>
    <link href="http://outprog.github.io/blog/2015/11/10/liu-lan-qi-de-new-date-yyyy-dot-mm-dot-dd-keng/"/>
    <updated>2015-11-10T00:32:16+08:00</updated>
    <id>http://outprog.github.io/blog/2015/11/10/liu-lan-qi-de-new-date-yyyy-dot-mm-dot-dd-keng</id>
    <content type="html"><![CDATA[<p>这个坑让我填了半个多小时。发个博文做纪念!</p>

<pre><code>new Date('yyyy.mm.dd')
</code></pre>

<p>以上这段简单的代码，在 Chrome 下可以完美运行，在 Safari 下运行却会返回无效日期(Invalid Date)。</p>

<p>为了保证兼容性，应该使用如下代码：</p>

<pre><code>new Date('yyyy-mm-dd')
</code></pre>

<p>ps: 不同浏览器引擎对 js 的实现都存在细微的差别，一定要小心这些陷阱。写代码要注意兼容性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 Mac OS X 上使用 SSH 出现 Perl Warning: Setting Local Failed 的问题]]></title>
    <link href="http://outprog.github.io/blog/2015/10/17/jie-jue-mac-os-x-shang-shi-yong-ssh-chu-xian-perl-warning-setting-local-failed-de-wen-ti/"/>
    <updated>2015-10-17T12:01:56+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/17/jie-jue-mac-os-x-shang-shi-yong-ssh-chu-xian-perl-warning-setting-local-failed-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在 Mac 上使用 SSH 连接远程服务器，运行 mongo 会出现报错：</p>

<pre><code>Failed global initialization: BadValue Invalid or no user locale set. Please ensure LANG and/or LC_* environment variables are set correctly.
</code></pre>

<p>运行 mysql、psql 或者其他一些程序也可能出现如下警告：</p>

<pre><code>perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
    LANGUAGE = (unset),
    LC_ALL = (unset),
    LC_CTYPE = "UTF-8",
    LANG = "en_US.UTF-8"
are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
</code></pre>

<!--more-->


<p>这是因为 Mac OS X 使用 SSH 连接远程服务器的时候缺少两个变量，解决办法是在 Mac OS X 本机的 ~/.bash_profit 文件中添加下面两行代码：</p>

<pre><code>export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
</code></pre>

<p>重启终端（Terminal）后可以解决该问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 使用 Cron 实现计划任务]]></title>
    <link href="http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu/"/>
    <updated>2015-10-15T21:37:47+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu</id>
    <content type="html"><![CDATA[<p><img class="img-responsive" src="/images/post/20151015/Timing.jpg"></p>

<p>Windows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。</p>

<!--more-->


<h2>启动 cron 服务</h2>

<p>通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：</p>

<pre><code>$ apt-get install cron
</code></pre>

<p>若已经安装，输入以下命令判断 cron 服务是否启动：</p>

<pre><code>$ pgrep cron
</code></pre>

<p>如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。<br/>
启动 cron 服务：</p>

<pre><code>$ service cron start
</code></pre>

<h2>管理任务计划文件</h2>

<p>cron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。</p>

<pre><code>usage: crontab [-u user] file
       crontab [ -u user] [ -i ] { -e | -l | -r }
               (default operation is replace, per 1003.2)
       -e      (edit user's crontab)
       -l      (list user's crontab)
       -r      (delete user's crontab)
       -i      (prompt before deleting user's crontab)
</code></pre>

<p>参数说明：</p>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u user</td>
<td>指定用户</td>
</tr>
<tr>
<td>-e</td>
<td>编辑某个用户的计划任务文件，若不指定用户，默认编辑当前用户的计划任务文件</td>
</tr>
<tr>
<td>-l</td>
<td>显示某个用户的计划任务文件，若不指定用户，默认显示当前用户的计划任务文件</td>
</tr>
<tr>
<td>-r</td>
<td>删除某个用户的计划任务文件，若不指定用户，默认删除当前用户的计划任务文件</td>
</tr>
<tr>
<td>-i</td>
<td>在删除之前推送确认提示</td>
</tr>
</tbody>
</table>


<p><br>
使用示例：</p>

<pre><code>$ crontab -u foo -e     #编辑用户 foo 的计划任务文件

$ crontab -e            #编辑当前用户的计划任务文件

$ crontab -u foo -l     #显示用户 foo 的计划任务文件

$ crontab -l            #显示当前用户的计划任务文件

$ crontab -r            #删除当前用户的计划任务文件
</code></pre>

<h2>编辑任务计划文件</h2>

<p>初次使用 crontab -e，可能需要选择编辑器，输入编辑器序号点击回车后进入计划任务文件编辑模式。若直接进入编辑模式忽略以上内容。</p>

<p>进入编辑模式后，按照指定格式添加任务计划。</p>

<p>任务计划的语法格式如下：</p>

<pre><code>m h dom mon dow   command
0-59 0-23 1-31 1-12 0-7  command
</code></pre>

<ul>
<li>m: 表示分钟</li>
<li>h: 表示小时</li>
<li>dom: 表示日期</li>
<li>mon: 表示月份</li>
<li>dow: 表示星期</li>
<li>command: 预执行的命令</li>
</ul>


<p>另外需要使用一些特殊符号实现灵活的配置：</p>

<ul>
<li>* 代表所有值</li>
<li>/ 代表“每”</li>
<li>- 代表范围</li>
<li>, 分割数字</li>
</ul>


<p>任务示例如下：</p>

<pre><code>## 指定具体执行时间
2   *  *  *  * ls    #每个小时的第2分钟执行一次 ls 命令
30  7  *  *  * ls    #每天7：30执行一次 ls 命令
30 20  *  *  2 ls    #每周二，20：30执行一次 ls 命令（0和7表示星期天）

## 指定间隔时间
*/2 *  *  *  * ls    #每隔2分钟执行一次 ls 命令

## 指定时间段
30  7 3-6 *  * ls    #每个月的3，4，5，6号的7：30分各执行一次 ls 命令

## 指定多个时间
30  7 3,6 *  * ls    #每月的3号和6号的7：30分各执行一次 ls 命令 
</code></pre>

<p>另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 &ldquo;#!/bin/bash"，否则 run-parts 会调用失败）.</p>

<pre><code>30 7 * * * run-parts /home   #每天7：30运行 /home 目录下的所有脚本
</code></pre>

<p>按照指定格式添加任务，保存后，任务生效。</p>

<p>下面是一个实际的计划任务文件，包含系统自带注释和一个每两分钟执行一次输出字符串 ”Hello World“ 到 /home 目录下 cron_test 文件的计划任务。</p>

<pre><code># Edit this file to introduce tasks to be run by cron. 
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# m h  dom mon dow   command
*/2 * * * * echo "Hello World" &gt;&gt; /home/cron_test                                                          
</code></pre>
]]></content>
  </entry>
  
</feed>
