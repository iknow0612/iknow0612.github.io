<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Outprog Blog]]></title>
  <link href="http://outprog.github.io/atom.xml" rel="self"/>
  <link href="http://outprog.github.io/"/>
  <updated>2017-10-24T11:44:58+08:00</updated>
  <id>http://outprog.github.io/</id>
  <author>
    <name><![CDATA[Xiongwei]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[银行业白皮书：区块链的五大应用场景]]></title>
    <link href="http://outprog.github.io/blog/2017/10/24/blockchain-five-app/"/>
    <updated>2017-10-24T11:10:35+08:00</updated>
    <id>http://outprog.github.io/blog/2017/10/24/blockchain-five-app</id>
    <content type="html"><![CDATA[<h3>场景一:数字货币:提高货币发行及使用的便利性</h3>

<p>比特币的崛起颠覆了人类对货币的概念。比特币及其他数字货币的出现与扩展正在改变人类使用货币的方式。从过去人类使用实物交易，到发展物理货币及后来的信用货币，都是随着人类的商业行为及社会发展不断演进。随着电子金融及电子商务的崛起，数字货币安全、便利、低交易成本的独特性，更适合基于网络的商业行为，将来有可能取代物理货币的流通。</p>

<p>以比特币为代表的数字货币目前已在欧美国家获得相当程度的市场接受，不但能在商户用比特币支付商品，更是衍生出比特币的借记卡与ATM机等应用产品。数字货币与法定货币之间交换的交易平台也应运而生，例如美国最大的比特币交易平台Coinbase目前支持美金、欧元、英镑及加拿大币与比特币之间的兑换;中国的交易平台OKCoin及火币也支持人民币与比特币的交易;比特币与法定货币之间的庞大交易量与流动性足以被视为一种国际通行货币。正是比特币网络的崛起，让社会各界注意到其背后的分布式账本区块链技术，并逐渐在数字货币外的众多场景获得开发应用。</p>

<p>国家发行数字货币将成趋势。2015年厄瓜多尔率先推出国家版数字货币，不但能减少发行成本及增加便利性，还能让偏远地区无法拥有银行资源的民众也能通过数字化平台，获得金融服务。突尼斯也根据区块链的技术发行国家版数字货币，除了让国民通过数字货币买卖商品，还能缴付水电费账单等，结合区块链分布式账本的概念，将交易纪录记载于区块链中，方便管理。</p>

<p>同时，其他许多国家也在探讨发行数字货币的可行性。目前，包括瑞典、澳大利亚及俄罗斯正在研讨发展数字货币的计划。英国央行正委托伦敦大学学院设计一套数字货币RSCoin进行试验,预期通过央行发行的数字货币来提高整体金融体系的安全性与效率。中国央行也在2016年1月召开数字货币研讨会，提出争取早日推出央行发行的数字货币。各国央行均认识到数字货币能够替代实物现金，降低传统纸币发行、流通的成本，提高支付结算的便利性;并增加经济交易透明度，减少洗钱、逃漏税等违法犯罪行为，提升央行对货币供给和货币流通的控制力;同时，通过发展数字货币背后的区块链技术应用，扩展到整个金融业及其他领域，确保资金和信息的安全，提升社会整体效能。</p>

<h3>场景二:跨境支付与结算:实现点到点交易，减少中间费用</h3>

<p>当前的跨境支付结算时间长、费用高、又必须通过多重中间环节。拥有一个可信任的中介角色在现今的跨境交易非常重要，当跨境汇款与结算的方式日趋复杂，付款人与收款人之间所仰赖的第三方中介角色更显得极其重要。每一笔汇款所需的中间环节不但费时，而且需要支付大量的手续费，其成本和效率成为跨境汇款的瓶颈所在。如因每个国家的清算程序不同，可能导致一笔汇款需要2至3天才能到帐，效率极低，在途资金占用量极大。</p>

<p>区块链将可摒弃中转银行的角色，实现点到点快速且成本低廉的跨境支付。通过区块链的平台，不但可以绕过中转银行，减少中转费用，还因为区块链安全、透明、低风险的特性，提高了跨境汇款的安全性，以及加快结算与清算速度，大大提高资金利用率。未来，银行与银行之间可以不再通过第三方，而是通过区块链技术打造点对点的支付方式。省去第三方金融机构的中间环节，不但可以全天候支付、实时到账、提现简便及没有隐形成本，也有助于降低跨境电商资金风险及满足跨境电商对支付清算服务的及时性、便捷性需求。</p>

<p>根据麦肯锡的测算，从全球范围看，区块链技术在B2B跨境支付与结算业务中的应用将可使每笔交易成本从约26美元下降到15美元，其中约75%为中转银行的支付网络维护费用，25%为合规、差错调查，以及外汇汇兑成本(图7)。</p>

<p>Ripple的跨账本协议帮助银行间快速结算。成立于美国的Ripple为一家利用类区块链概念发展跨境结算的金融科技公司，它构建了一个没有中央节点的分布式支付网络，希望提供一个能取代SWIFT(环球同业银行金融电讯协会)网络的跨境转账平台，打造全球统一网络金融传输协议。Ripple的跨账本协议(interledgerprotocol)可说是让参与协议的各方都能看到同样的一本账本，通过该公司的网络，银行客户可以实现实时的点对点跨国转账，不需中心组织管理，且支持各国不同货币。如果Ripple协议成为了金融体系的标准协议，在网络中的各方都能任意转账货币，支付就会像收发电子邮件一样快捷、便宜，最重要的是没有所谓的跨行异地以及跨国支付费用。目前全球已有17个国家的银行加入合作，共同参与Ripple为金融机构打造的解决方案。</p>

<p>Circle致力于发展C2C跨境支付平台。Circle是一家开发比特币钱包的数字货币初创公司，正致力于通过比特币后台网络的区块链技术，使国家货币之间的资金转移更加简单和便宜。Circle在2016年获得英国政府颁发的首张电子货币牌照，允许Circle客户在美元与英镑之间进行即时转账。考虑到该电子货币牌照在整个欧盟都有效，预计很快欧元也会加入。</p>

<p>除了上述两家金融科技公司，Chain,Ethereum,IBM,Microsoft等公司也都在利用区块链技术发展跨境支付与结算的技术。预计在不久的将来，金融体系现有的传统交易模式将被高效能、高安全性及成低本的颠覆性技术所替代。</p>

<h3>场景四:证券发行与交易:实现准实时资产转移，加速交易清算速度</h3>

<p>证券的发行与交易的流程手续繁杂且效率低下。一般公司的证券发行，必须先找到一家券商，公司与证券发行中介机构签订委托募集合同，完成繁琐的申请流程后，才能寻求投资者认购。以美国的交易模式为例，证券一旦上市后，交易更是极为低效，证券交易日和交割日之间存在3天的时间间隔。</p>

<p>区块链技术使得金融交易市场的参与者享用平等的数据来源，让交易流程更加公开、透明、有效率。通过共享的网络系统参与证券交易，使得原本高度依赖中介的传统交易模式变为分散的平面网络交易模式。这种革命性交易模式在西方金融市场的实践中已经显现出三大优势:首先，能大幅度减少了证券交易成本，区块链技术的应用可使证券交易的流程更简洁、透明、快速，减少重复功能的IT系统，提高市场运转的效率;其次，区块链技术可准实时地记录交易者的身份、交易量等关键信息，有利于证券发行者更快速清晰地了解股权结构，提升商业决策效率;公开透明又可追踪的电子记录系统同时减少了暗箱操作、内幕交易的可能性，有利于证券发行者和监管部门维护市场。第三，区块链技术使得证券交易日和交割日时间间隔从1-3天缩短至10分钟，减少了交易的风险，提高了交易的效率和可控性。</p>

<p>Chain与Nasdaq推出私募股权市场交易平台。2015年10月，Nasdaq在拉斯维加斯的Money20/20大会上，正式公布了与Chain搭建区块链平台Linq——首个通过区块链平台进行数字化证券产品管理的系统平台。对于股票交易者而言，区块链可以消除对基于纸笔或者电子表格的记录依赖的需求，减少交易的人为差错，提高交易平台的透明度和可追踪性。对股票的发行公司而言，Linq实现了更好的管理股票数据的功能，让纳斯达克在私募股权市场中为创业者和风险投资者提供更好的服务。</p>

<p>DigitalAssetHoldings(DAH)即将为澳大利亚证券交易所设计清算和结算系统。澳大利亚证券交易所在2015年表示，将设计一套新系统取代所有的核心技术系统以提升结算速度。美国区块链公司DAH在400家投标者中，拿到了这项计划合同。DAH所开发的技术目标将允许所有的参与者，在同一个数据库中进行实时的资产交易;它能够让数字资产在交易的对手方之间进行转移而无需任何中央机构来负责记录交易，因而达到实时交易效果，实现结算时间由当前的两个工作日减少到数分钟。</p>

<p>除了美国Nasdaq及澳大利亚证券市场外，芝加哥商品交易所、迪拜多种商品中心、德国、伦敦、日本、韩国等多国的证交所都已经开始发展区块链技术的应用。中国近来也由上海证券交易所牵头组织ChinaLedger联盟,组织国内商品交易所，实验由区块链发展场外交易平台。</p>

<h3>场景五:客户征信与反欺诈:降低法律合规成本，防止金融犯罪</h3>

<p>银行的客户征信及法律合规的成本不断增加。过去几年各国商业银行为了满足日趋严格的监管要求，不断投入资源加强信用审核及客户征信，以提升反欺诈、反洗钱抵御复杂金融衍生品过度交易导致的系统性风险的成效。2014年，UBS为了应对新的监管要求，增加了约10亿美元的支出;而汇丰集团在2013至2015年间，法律合规部门的员</p>

<p>工人数从2000多人增至7000多名。为提高交易的安全性及符合法规要求，银行投入了相当的金钱与人力，已经成为极大的成本负担。</p>

<p>记载于区块链中的客户信息与交易纪录有助于银行识别异常交易并有效防止欺诈。区块链的技术特性可以改变现有的征信体系，在银行进行“认识你的客户”(KYC)时，将不良纪录客户的数据储存在区块链中。客户信息及交易记录不仅可以随时更新，同时，在客户信息保护法规的框架下，如果能实现客户信息和交易纪录的自动化加密关联共享，银行之间能省去许多KYC的重复工作。银行也可以通过分析和监测在共享的分布式帐本内客户交易行为的异常状态，及时发现并消除欺诈行为。</p>

<p>Chainalysis为银行设计反欺诈监测系统。原本为专门打击利用数字货币洗钱和欺诈行为的初创公司Chainalysis，现在也为银行设计区块链上的异常交易行为监测与分析系统。通过监测公开式账本上的交易寻找不法行为，帮助银行反洗钱与反欺诈。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《计算的本质:深入剖析程序和计算机》后记总结]]></title>
    <link href="http://outprog.github.io/blog/2016/03/02/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji-hou-ji-zong-jie/"/>
    <updated>2016-03-02T11:07:17+08:00</updated>
    <id>http://outprog.github.io/blog/2016/03/02/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji-hou-ji-zong-jie</id>
    <content type="html"><![CDATA[<ul>
<li>任何人都可以设计和实现一种编程语言。语法和语意的基本思想是简单的，Treetop这样的工具可以处理枯燥的细节。</li>
<li>每一个计算机程序都是一个数学对象。按句法来说，一个程序只是一个大数；语义上来说，它可能代表一个数学函数，或者一个能被形式化规约规则操纵的分层结构。这意味着数学上的许多技术和成果，如 Kleene 规约理论或者 Godel 不完备定理，都能等价地应用到程序上。</li>
<li>计算，最初被描述为只是“一台计算机做的事”，已经被证明是某种自然力量。很容易把计算想象为一个复杂的人类发明，它只能由对许多复杂部分进行特殊设计的系统来执行，但在系统中还可以看到支持它没那么复杂。因此，计算不是一个枯燥的只是发生在微处理器中的人工过程，而是一个在许多不同地点以不同方式发生的普遍现象。</li>
</ul>


<!--more-->


<ul>
<li>计算不是全有或全无的。不同的机器拥有不同的计算能力，这给了我们用途上的连续性：DFA 和 NFA 有有限的能力，DPDA 更强大，NPDA 还更强大，而图灵机是我们知道的最强大的机器。</li>
<li>抽象的编码和级别对于利用计算能力必不可少。计算机是维护抽象宝塔的机器，从非常低层次的半导体物理学开始，上升到层次高得多的多点触控图形用户界面。为了让计算有用，我们需要能把现实世界中复杂的思想编码成机器能处理的简单的形式，然后再把结果解码回有意义的高层表示。</li>
<li>计算能做的事情是有限的。我们不知道如何构建比图灵机能力更强的机器，但确实存在图灵机无法解决的问题，而这些问题包括我们所写程序的信息。可以利用模糊的或者不完整的答案处理这些限制，以便质疑我们程序的行为。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[2015年度工作总结]]></title>
    <link href="http://outprog.github.io/blog/2015/12/18/2015nian-du-gong-zuo-zong-jie/"/>
    <updated>2015-12-18T20:57:59+08:00</updated>
    <id>http://outprog.github.io/blog/2015/12/18/2015nian-du-gong-zuo-zong-jie</id>
    <content type="html"><![CDATA[<p>本年度整体工作汇报如下：</p>

<h3>年度工作项目汇总</h3>

<hr />

<h4>天津分行微信公众平台（2015/3/7）</h4>

<p>根据零售业务部需求定制开发分行微信公众平台。利用微信公众平台服务客户，更好的引导客户了解我行企业文化，参与我行互动活动。</p>

<h4>客户经理考核系统</h4>

<ul>
<li>2015年考核办法升级（2015/6/5)  <br/>
  根据2015年考核办法，对客户经理考核系统进行升级。  <br/>
 <!--more-->

<ul>
<li>新增“五级分类”客户名单导入功能；</li>
<li>新增“分行自开自贴银承汇票”清单导入功能；</li>
<li>升级贷款分值、贷款经济成本、表外经济成本、银承占用费、中收分值、存贷比加扣成本的分值计算模块；</li>
<li>升级计算管和历史修改模块。</li>
</ul>
</li>
<li>考核分值计算升级（2015/6/29）  <br/>
  根据2015年考核办法，对客户经历考核系统进行变更调整，升级核分值计算模块。</li>
<li>国际业务中收录入升级（2015/7/1）  <br/>
  由于业务条线需求变更，将PL52748对应的科目号为“511-07-06”的外汇汇款业务调整为手工及系统双线操作，对录入权限进行变更。</li>
<li>开发模拟利润模块（2015/7/24）  <br/>
  根据业务部门需求开发模拟利润考核模块。

<ul>
<li>新增模拟利润计算模块；</li>
<li>新增模拟利润排行；</li>
<li>新增团队模拟利润汇总；</li>
<li>新增全行模拟利润汇总；</li>
<li>新增模拟利润明细，包括：存贷款模拟利润、贷款经济成本、存贷比加扣成本、中收模拟利润、表外模拟利润。</li>
</ul>
</li>
<li>外币FTP变更，科目号变更（2015/10/20）  <br/>
  修改系统中外币FTP取值范围；增加科目号。

<ul>
<li>根据当前外币FTP数据情况，修改系统中外币FTP取值范围；</li>
<li>新增科目号205-01-xx、235-16-01、235-16-03。</li>
</ul>
</li>
<li>客户经理考核系统功能变更及添加（2015/12/10）  <br/>
  根据总行数据变更要求及分行考核需求，对客户经理考核系统进行相应的功能添加和变更。

<ul>
<li>由于数据集市客户号变更，对分值计算进行全面升级调整；</li>
<li>模拟利润模块中添加批量查询功能；</li>
<li>对客户经理统计模块进行升级改造，对客户经理上年末数据进行回溯计算。  <br/>
.</li>
</ul>
</li>
</ul>


<h4>营销活动礼品发放系统</h4>

<p>为信用卡中心开发营销活动礼品发放系统，协助信用卡中心完成“7周年行庆信用卡客户回馈活动”。</p>

<h3>研发综合管理平台2.0</h3>

<hr />

<p>在保证完成行内业务需求的前提下，我对综合管理平台进行了全面的改造升级。通过为期3个月的开发设计工作，成功研发出新综合管理平台2.0。2015年7月以后的开发项目，包括客户经理考核系统－模拟利润模块、营销活动礼品发放系统等，统一使用新综合管理平台2.0进行开发，并取得了良好的效果。</p>

<p>新综合管理平台2.0提供更整洁高效的系统界面和完善的报表功能：</p>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151218/zhgl1.jpg"></p>

<p>新综合管理平台2.0提供完整的图表解决方案：</p>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151218/zhgl2.jpg"></p>

<h3>工作总结</h3>

<hr />

<p>经过2015年在软件开发方面的努力工作，在实际项目中分行软件开发流程更加规范化，同时本人的软件开发技术也得以积淀。使分行软件开发足以应对大型复杂项目，对上线系统的维护和升级也更加得心应手。</p>

<p>回望2015年，丰收充实。4月份到总行科技部进行培训学习，在培训课程中收获颇丰。培训之际，结识了兄弟分行的开发同事们，大家相互交流，共同进步。通过培训课程学到的软件开发知识，对分行管理平台进行开发升级，顺利完成了新综合管理平台2.0的研发工作。2015年完成了业务部门的各项需求，积累了大量实践经验。这一年，绝对是丰收的一年。</p>

<p>展望2016年，业务部门包括：投行部、零售业务部都有进行考核系统开发的意愿，2016年将会是充满挑战的一年，希望能和各位业务部门的同事密切合作，进行各项新系统的研发工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为什么要炒股]]></title>
    <link href="http://outprog.github.io/blog/2015/11/27/wei-shi-yao-yao-chao-gu/"/>
    <updated>2015-11-27T09:14:30+08:00</updated>
    <id>http://outprog.github.io/blog/2015/11/27/wei-shi-yao-yao-chao-gu</id>
    <content type="html"><![CDATA[<p>说到股票，很多人想到的都是投机倒把，无法预测，浪费时间，庄家在坑害百姓的钱&hellip;很多人会说股票就算你一时赚了，也会遇到跌的时候，最终的结果也是赚不了钱的。但是就算这样，我觉得还是应该拿一部分资金进行炒股，股票不是你一次性拿大笔资金去赌博，也不是一夜暴富，股票的正确“打开方式“应该是有节制，有策略，把控风险的长期操作。事实上，提高对风险的控制，是可以在投资中获得比较稳定的收益的。</p>

<!--more-->


<h2>为什么要炒股？</h2>

<p>为什么要炒股，那就必须从我们为什么要理财说起。现在定期存款利息越来越低，各种宝也收益渐低，我们应该怎么处理我们的存款？要知道每年货币贬值速度之快，十年前的100块和现在的100块早就不是一个概念。我们辛苦工作赚来的钱随着时间的流逝，价值变得越来越低。每个人都需要理财，至少需要把这种贬值降到最低。</p>

<p>理财也分不同层次和等级，可以全部买为银行理财产品，但这实在是太低效了。如果你已经接触过基金和股票，你一定会发现，基金和股票一天的收益可能等于某些理财产品一年的收益。</p>

<p>因为收益差距如此之大，更高级的理财方式应该是把自己的资金灵活的运作起来。在消费之外的那些闲余资金，不应该默默的放着，以乌龟一样的速度增长，然后被通货膨胀的兔子猛然超过。</p>

<p>我认为好的理财方式应该是：</p>

<p>把手里的资金划分风险等级。比如80%低风险资金，用于购买理财，20％高风险资金，用于购买高收益高回报的投资。很可能这20%的资金在短时间内的收益就远远的超过低风险资金。而且这些高风险资金的风险实质上也是可控的，在合理的支配下，可以产生稳定且远远高于低风险资金的收益。</p>

<p>那么，这种高风险的投资可以是什么？股票就是一个很好的选择。</p>

<p>股票是几乎每个人都可以触及的投资方式。</p>

<h2>关于入门</h2>

<p>入门股票，一定要提高风险意识。在渴望高回报的同时，必须意识到存在巨大的风险。初入股市，不应该把目标定得过高，应该以保本为前提，学会止损／止盈和控制自身贪婪的欲望。</p>

<ol>
<li>止损：做投资前，一定要预先设定好自己的亏损底线，如果亏损触及底线，就必须及时退出。留下资金，以备下次投资机会。</li>
<li>止盈：当投资有所回报的时候，应该进行止盈。进入股市必须明白一个道理，你的钱买成了股票，就算涨得再多，那也不是你的，只有当这些股票以高价卖出，才有真正的收益。如果不懂得在盈利的时候及时卖出，那就很难获利。很多人会疑问，到底什么时候该止盈？万一它会涨得更高呢？如前所述，要有自己的信息处理方法，另一方面，应该给自己定一个动态的盈利线，抵达盈利线应当控制欲望，进行止盈。</li>
</ol>


<p>止盈和止损如此重要，可以说是进入股市的基础之基础。想要投资能有稳定回报，就需要投资人有强大的自制力、判断力和耐心。如果不确信自己有控制自身欲望的能力，请不要进入股市。</p>

<p>要想进入股市，必须去自学很多相关知识，建立自己独到的判断方式。股市不能跟风，在股市中没有真正的股神，就算有股神能预测股票，这种预测也是很有时效性的，可能当你听到股神的预测时，这条消息很可能就已经过期。股市变化莫测，每一条刻的信息都可能导致决策的变化，在股市中必须自己建立一套从信息提取、分析、判断到决策的全套处理方法。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浏览器的 New Date('yyyy.mm.dd') 坑]]></title>
    <link href="http://outprog.github.io/blog/2015/11/10/liu-lan-qi-de-new-date-yyyy-dot-mm-dot-dd-keng/"/>
    <updated>2015-11-10T00:32:16+08:00</updated>
    <id>http://outprog.github.io/blog/2015/11/10/liu-lan-qi-de-new-date-yyyy-dot-mm-dot-dd-keng</id>
    <content type="html"><![CDATA[<p>这个坑让我填了半个多小时。发个博文做纪念!</p>

<pre><code>new Date('yyyy.mm.dd')
</code></pre>

<p>以上这段简单的代码，在 Chrome 下可以完美运行，在 Safari 下运行却会返回无效日期(Invalid Date)。</p>

<p>为了保证兼容性，应该使用如下代码：</p>

<pre><code>new Date('yyyy-mm-dd')
</code></pre>

<p>ps: 不同浏览器引擎对 js 的实现都存在细微的差别，一定要小心这些陷阱。写代码要注意兼容性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于骑车]]></title>
    <link href="http://outprog.github.io/blog/2015/10/30/guan-yu-qi-che/"/>
    <updated>2015-10-30T21:50:38+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/30/guan-yu-qi-che</id>
    <content type="html"><![CDATA[<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151030/myroadbike.jpg"></p>

<p>高中的时候完成的第一次长途骑行，是一次没有任何准备没有任何计划的意外之旅。两个人，一辆普通山地车、一辆可以变速的儿童自行，没有装备、没有备胎、没有地图，骑行60公里。</p>

<p>大学几年很少骑车，直到快毕业的时候，收到朋友赠送的山地车才开始新的骑行之旅。</p>

<!--more-->


<p>工作后的第一个国庆节，从天津骑车至北戴河。出发后不久就下雨，泥土溅满了后背，下午抵达美丽干净的北塘，看着雨后放晴的彩虹大桥、吹着海风别有一番滋味。汉沽到乐亭县沿途很多的烂路堪比“滇藏公路”，马路皲裂出拳头宽的裂痕使得路途异常艰苦。沿途大片大片的鱼塘、麦田和谷田是唯一的风景。夜晚昌黎县到南戴河的乡间小道漆黑无比，海边的冷风仿佛吹到了骨子里，车把上也有一层薄薄的霜。真正抵达北戴河的时候，心里其是失落的，海边挤满了人群，景色变得不再重要，相比之下为了抵达北戴河这三天的艰苦路程才是真正的充满色彩。</p>

<p>从那以后陆陆续续骑行了不少路线，车也从1千块钱的山地车升级到5千块的入门级山地。慢慢的认识各种套件，山地传动套件从入门到 XTR 级别，车架从铝合金到碳纤维，各种高端油压碟刹。后来见到朋友骑的 Cannondale（佳能戴尔）左撇子软尾山地车，瞬间就觉得帅爆了。左撇子山地车前叉只有一边，有一种缺失平衡的美感，然而操纵性和强度都不比一般的前叉差，如此有逼格的山地车，完全就是我的菜啊。左撇子山地车价格昂贵，朋友这款软尾标价接近4万5。</p>

<p>这段时间对自行车几乎有些狂热了，凭着兴趣爱好，自己就开始在网上收集一些山地车的资料看看，发现左撇子山地车的中国官网资料都是英文，而且也没有标价，就琢磨自己做一个展示网站。那段时间正好在研究 nodejs，就用 express 框架搭建了 <a href="http://www.outprog.com:8090">CannondaleFun</a>。在朋友的帮助下爬取了官网的资料和图片，自己翻译了车辆的简单介绍，再搜集国内报价，简单 coding 后网站成功上线。</p>

<p>一直觉得山地车结实耐艹，什么地形都可以去，是骑车的不二之选。慢慢通过和车友们的接触，在百度贴吧上看帖，开始对公路车感兴趣。玩车久了，才知道，山地车就该去山上完，去烂路上刺激，而城市道路还是铺设公路最好，终于踏上了公路车的不归途。。。</p>

<p>记得第一次用公路车在路面上狂飙，道路两旁的景色飞速后退，路面的颠簸从把手传到掌心，原来双腿可以有这么大的潜力，内心真正的感到不可思议（蹬着不到 8 kg 的自行车，那时候真怕它散架啊）。这才发现在速度上公路和山地真的确实不是一个级别的。</p>

<p>然而蹬上公路车和会骑公路车其实还相差甚远。今年五月禧玛诺车迷节参加了一次公路车比赛，匀速 30 第三圈就被迫退赛（因为被第一名超得太多）。看着运动员们近乎无限的体能，知道离自己的体能极限还远得很，看来这个运动还有太多值得“折tiao腾zhan”的地方。</p>

<p>呵呵，骑车是一辈子的事情，慢慢来吧。还有很多山头没骑，还有很多美景没看，还有很多挑战没有完成！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决 Mac OS X 上使用 SSH 出现 Perl Warning: Setting Local Failed 的问题]]></title>
    <link href="http://outprog.github.io/blog/2015/10/17/jie-jue-mac-os-x-shang-shi-yong-ssh-chu-xian-perl-warning-setting-local-failed-de-wen-ti/"/>
    <updated>2015-10-17T12:01:56+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/17/jie-jue-mac-os-x-shang-shi-yong-ssh-chu-xian-perl-warning-setting-local-failed-de-wen-ti</id>
    <content type="html"><![CDATA[<p>在 Mac 上使用 SSH 连接远程服务器，运行 mongo 会出现报错：</p>

<pre><code>Failed global initialization: BadValue Invalid or no user locale set. Please ensure LANG and/or LC_* environment variables are set correctly.
</code></pre>

<p>运行 mysql、psql 或者其他一些程序也可能出现如下警告：</p>

<pre><code>perl: warning: Setting locale failed.
perl: warning: Please check that your locale settings:
    LANGUAGE = (unset),
    LC_ALL = (unset),
    LC_CTYPE = "UTF-8",
    LANG = "en_US.UTF-8"
are supported and installed on your system.
perl: warning: Falling back to the standard locale ("C").
</code></pre>

<!--more-->


<p>这是因为 Mac OS X 使用 SSH 连接远程服务器的时候缺少两个变量，解决办法是在 Mac OS X 本机的 ~/.bash_profit 文件中添加下面两行代码：</p>

<pre><code>export LC_CTYPE=en_US.UTF-8
export LC_ALL=en_US.UTF-8
</code></pre>

<p>重启终端（Terminal）后可以解决该问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ubuntu 14.04 使用 Cron 实现计划任务]]></title>
    <link href="http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu/"/>
    <updated>2015-10-15T21:37:47+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/15/ubuntu-14-dot-04-shi-yong-cron-shi-xian-ji-hua-ren-wu</id>
    <content type="html"><![CDATA[<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151015/Timing.jpg"></p>

<p>Windows 自带定时执行任务的工具叫做“计划任务”，Linux 下我们使用 Cron 实现这一功能。</p>

<!--more-->


<h2>启动 cron 服务</h2>

<p>通常 ubuntu 下自带 cron，如果没有也可以通过以下命令进行安装：</p>

<pre><code>$ apt-get install cron
</code></pre>

<p>若已经安装，输入以下命令判断 cron 服务是否启动：</p>

<pre><code>$ pgrep cron
</code></pre>

<p>如果有 pid （一串数字）输出则说明 cron 服务已经启动，没有任何输出说明需要手动启动 cron 服务。<br/>
启动 cron 服务：</p>

<pre><code>$ service cron start
</code></pre>

<h2>管理任务计划文件</h2>

<p>cron 的所有任务计划都记录在 crontab 任务计划文件中，通过 crontab 命令对该任务文件进行管理。</p>

<pre><code>usage: crontab [-u user] file
       crontab [ -u user] [ -i ] { -e | -l | -r }
               (default operation is replace, per 1003.2)
       -e      (edit user's crontab)
       -l      (list user's crontab)
       -r      (delete user's crontab)
       -i      (prompt before deleting user's crontab)
</code></pre>

<p>参数说明：</p>

<table>
<thead>
<tr>
<th>参数</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>-u user</td>
<td>指定用户</td>
</tr>
<tr>
<td>-e</td>
<td>编辑某个用户的计划任务文件，若不指定用户，默认编辑当前用户的计划任务文件</td>
</tr>
<tr>
<td>-l</td>
<td>显示某个用户的计划任务文件，若不指定用户，默认显示当前用户的计划任务文件</td>
</tr>
<tr>
<td>-r</td>
<td>删除某个用户的计划任务文件，若不指定用户，默认删除当前用户的计划任务文件</td>
</tr>
<tr>
<td>-i</td>
<td>在删除之前推送确认提示</td>
</tr>
</tbody>
</table>


<p><br>
使用示例：</p>

<pre><code>$ crontab -u foo -e     #编辑用户 foo 的计划任务文件

$ crontab -e            #编辑当前用户的计划任务文件

$ crontab -u foo -l     #显示用户 foo 的计划任务文件

$ crontab -l            #显示当前用户的计划任务文件

$ crontab -r            #删除当前用户的计划任务文件
</code></pre>

<h2>编辑任务计划文件</h2>

<p>初次使用 crontab -e，可能需要选择编辑器，输入编辑器序号点击回车后进入计划任务文件编辑模式。若直接进入编辑模式忽略以上内容。</p>

<p>进入编辑模式后，按照指定格式添加任务计划。</p>

<p>任务计划的语法格式如下：</p>

<pre><code>m h dom mon dow   command
0-59 0-23 1-31 1-12 0-7  command
</code></pre>

<ul>
<li>m: 表示分钟</li>
<li>h: 表示小时</li>
<li>dom: 表示日期</li>
<li>mon: 表示月份</li>
<li>dow: 表示星期</li>
<li>command: 预执行的命令</li>
</ul>


<p>另外需要使用一些特殊符号实现灵活的配置：</p>

<ul>
<li>* 代表所有值</li>
<li>/ 代表“每”</li>
<li>- 代表范围</li>
<li>, 分割数字</li>
</ul>


<p>任务示例如下：</p>

<pre><code>## 指定具体执行时间
2   *  *  *  * ls    #每个小时的第2分钟执行一次 ls 命令
30  7  *  *  * ls    #每天7：30执行一次 ls 命令
30 20  *  *  2 ls    #每周二，20：30执行一次 ls 命令（0和7表示星期天）

## 指定间隔时间
*/2 *  *  *  * ls    #每隔2分钟执行一次 ls 命令

## 指定时间段
30  7 3-6 *  * ls    #每个月的3，4，5，6号的7：30分各执行一次 ls 命令

## 指定多个时间
30  7 3,6 *  * ls    #每月的3号和6号的7：30分各执行一次 ls 命令 
</code></pre>

<p>另外，使用 run-parts 可以运行指定目录下所有的脚本（注意脚本必须加上 &ldquo;#!/bin/bash"，否则 run-parts 会调用失败）.</p>

<pre><code>30 7 * * * run-parts /home   #每天7：30运行 /home 目录下的所有脚本
</code></pre>

<p>按照指定格式添加任务，保存后，任务生效。</p>

<p>下面是一个实际的计划任务文件，包含系统自带注释和一个每两分钟执行一次输出字符串 ”Hello World“ 到 /home 目录下 cron_test 文件的计划任务。</p>

<pre><code># Edit this file to introduce tasks to be run by cron. 
# 
# Each task to run has to be defined through a single line
# indicating with different fields when the task will be run
# and what command to run for the task
# 
# To define the time you can provide concrete values for
# minute (m), hour (h), day of month (dom), month (mon),
# and day of week (dow) or use '*' in these fields (for 'any').# 
# Notice that tasks will be started based on the cron's system
# daemon's notion of time and timezones.
# 
# Output of the crontab jobs (including errors) is sent through
# email to the user the crontab file belongs to (unless redirected).
# 
# For example, you can run a backup of all your user accounts
# at 5 a.m every week with:
# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
# 
# For more information see the manual pages of crontab(5) and cron(8)
# 
# m h  dom mon dow   command
*/2 * * * * echo "Hello World" &gt;&gt; /home/cron_test                                                          
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mac 快捷键]]></title>
    <link href="http://outprog.github.io/blog/2015/10/13/mac-keyboard-shortcuts/"/>
    <updated>2015-10-13T22:49:53+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/13/mac-keyboard-shortcuts</id>
    <content type="html"><![CDATA[<h4>您可以按组合键来执行通常需要鼠标、触控板或其他输入设备才能完成的操作。</h4>

<p>要使用键盘快捷键，请按住一个或多个修饰键，同时按快捷键的最后一个键。例如，要使用快捷键 Command-C（拷贝），请按住 Command 键并按 C 键，然后同时松开这两个键。Mac 菜单和键盘通常使用某些按键的符号，其中包括以下修饰键：</p>

<ul>
<li>Command ⌘</li>
<li>Shift ⇧</li>
<li>Option ⌥</li>
<li>Control ⌃</li>
<li>Caps Lock ⇪</li>
<li>Fn</li>
</ul>


<p>如果您使用的是 Windows PC 专用键盘，请用 Alt 键代替 Option 键，用 Windows 标志键代<!--more-->替 Command 键。有些 Mac 键盘和快捷键使用<a href="https://support.apple.com/zh-cn/HT201181">顶行中的特殊按键</a>，这些按键上有音量图标、显示屏亮度图标和其他功能图标。按图标键可执行相应功能，或将其与 Fn 键组合使用来用作 F1、F2、F3 或其他标准功能键。</p>

<p>要了解更多快捷键，请查看您所用 app 的菜单。每个 app 都有其自己的快捷键，并且一个 app 中使用的快捷键可能不适用于另一个 app。</p>

<hr />

<p><br></p>

<h3>剪切、拷贝、粘贴和其他常用快捷键</h3>

<table>
<thead>
<tr>
<th>快捷键</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command-X   </td>
<td>剪切：移除所选项并将其拷贝到剪贴板。</td>
</tr>
<tr>
<td>Command-C </td>
<td>将所选项拷贝到剪贴板。这同样适用于 Finder 中的文件。</td>
</tr>
<tr>
<td>Command-V   </td>
<td>将剪贴板的内容粘贴到当前文稿或 app 中。这同样适用于 Finder 中的文件。</td>
</tr>
<tr>
<td>Command-Z   </td>
<td>撤销前一个命令。随后您可以按 Command-Shift-Z 来重做，从而反向执行撤销命令。在某些 app 中，您可以撤销和重做多个命令。</td>
</tr>
<tr>
<td>Command-A   </td>
<td>全选各项。</td>
</tr>
<tr>
<td>Command-F   </td>
<td>查找：打开“查找”窗口，或在文稿中查找项目。</td>
</tr>
<tr>
<td>Command-G   </td>
<td>再次查找：查找之前所找到项目出现的下一个位置。要查找出现的上一个位置，请按 Command-Shift-G。</td>
</tr>
<tr>
<td>Command-H   </td>
<td>隐藏最前面的 app 的窗口。要查看最前面的 app 但隐藏所有其他 app，请按 Command-Option-H。</td>
</tr>
<tr>
<td>Command-M   </td>
<td>将最前面的窗口最小化至 Dock。要最小化最前面的 app 的所有窗口，请按 Command-Option-M。</td>
</tr>
<tr>
<td>Command-N   </td>
<td>新建：打开一个新文稿或窗口。</td>
</tr>
<tr>
<td>Command-O   </td>
<td>打开所选项，或打开一个对话框以选择要打开的文件。</td>
</tr>
<tr>
<td>Command-P   </td>
<td>打印当前文稿。</td>
</tr>
<tr>
<td>Command-S   </td>
<td>存储当前文稿。</td>
</tr>
<tr>
<td>Command-W   </td>
<td>关闭最前面的窗口。要关闭该 app 的所有窗口，请按 Command-Option-W。</td>
</tr>
<tr>
<td>Command-Q   </td>
<td>退出 app。</td>
</tr>
<tr>
<td>Command-Option-Esc  </td>
<td>强制退出：选择要强制退出的 app。或者，按住 Command-Shift-Option-Esc 3 秒钟来仅强制最前面的 app 退出。</td>
</tr>
<tr>
<td>Command–空格键 </td>
<td>Spotlight：显示或隐藏 Spotlight 搜索栏。要从 Finder 窗口执行 Spotlight 搜索，请按 Command–Option–空格键。|如果您使用多个输入源以键入不同的语言，那么这些快捷键会更改输入源，而非显示 Spotlight。</td>
</tr>
<tr>
<td>空格键   </td>
<td>快速查看：使用快速查看预览所选项。</td>
</tr>
<tr>
<td>Command-Tab </td>
<td>切换 app：在打开的 app 中切换到下一个最近使用的 app。</td>
</tr>
<tr>
<td>Command-Shift-波浪号 (~) </td>
<td>切换窗口：切换到最前面的 app 的下一个最近使用的窗口。</td>
</tr>
<tr>
<td>Command-Shift-3 </td>
<td>屏幕快照：拍摄整个屏幕的屏幕快照。了解更多屏幕快照快捷键。</td>
</tr>
<tr>
<td>Command-逗号 (,)  </td>
<td>偏好设置：打开最前面的 app 的偏好设置。</td>
</tr>
</tbody>
</table>


<p><br></p>

<h3>睡眠、注销和关机快捷键</h3>

<table>
<thead>
<tr>
<th>快捷键 </th>
<th> 描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>电源按钮 </td>
<td> 轻按可打开 Mac 或将 Mac 从睡眠状态唤醒。</td>
</tr>
<tr>
<td></td>
<td>当 Mac 处于唤醒状态时按住 1.5 秒钟会显示一个对话框，询问您是要重新启动、睡眠还是关机。</td>
</tr>
<tr>
<td></td>
<td>按住 5 秒钟会强制 Mac 关机。</td>
</tr>
<tr>
<td>Command–Control–电源按钮    </td>
<td>强制 Mac 重新启动。</td>
</tr>
<tr>
<td>Command–Option–电源按钮 </td>
<td>将 Mac 置于睡眠状态。</td>
</tr>
<tr>
<td>Shift–Control–电源按钮  </td>
<td>将显示器置于睡眠状态。</td>
</tr>
<tr>
<td>Command–Control–电源按钮 </td>
<td>退出所有 app，然后重新启动 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。</td>
</tr>
<tr>
<td>Command–Option–Control–电源按钮   </td>
<td>退出所有 app，然后关闭 Mac。如果任何打开的文稿有未存储的更改，系统将询问您是否要存储这些更改。</td>
</tr>
<tr>
<td>Command-Shift-Q </td>
<td>注销您的 OS X 用户帐户。系统将提示您确认。</td>
</tr>
<tr>
<td>Command-Shift-Option-Q  </td>
<td>立即注销您的 OS X 用户帐户，且系统不提示您确认。</td>
</tr>
</tbody>
</table>


<p><br></p>

<h3>文稿快捷键</h3>

<table>
<thead>
<tr>
<th>快捷键 </th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command-B   </td>
<td>以粗体显示所选文本，或者打开或关闭粗体显示功能。</td>
</tr>
<tr>
<td>Command-I   </td>
<td>以斜体显示所选文本，或者打开或关闭斜体显示功能。</td>
</tr>
<tr>
<td>Command-U   </td>
<td>对所选文本加下划线，或者打开或关闭加下划线功能。</td>
</tr>
<tr>
<td>Command-T   </td>
<td>显示或隐藏“字体”窗口。</td>
</tr>
<tr>
<td>Command-D   </td>
<td>从“打开”对话框或“存储”对话框中选择“桌面”文件夹。</td>
</tr>
<tr>
<td>Command-Control-D   </td>
<td>显示或隐藏所选字词的定义。</td>
</tr>
<tr>
<td>Command-Shift-冒号 (:)    </td>
<td>显示“拼写和语法”窗口。</td>
</tr>
<tr>
<td>Command-分号 (;)  </td>
<td>查找文稿中拼写错误的字词。</td>
</tr>
<tr>
<td>Option-Delete    </td>
<td>删除插入点左边的字词。</td>
</tr>
<tr>
<td>Control-H   </td>
<td>删除插入点左边的字符。也可以使用 Delete 键。</td>
</tr>
<tr>
<td>Control-D   </td>
<td>删除插入点右边的字符。也可以使用 Fn-Delete。</td>
</tr>
<tr>
<td>Fn-Delete   </td>
<td>在没有向前删除   键的键盘上向前删除。也可以使用 Control-D。</td>
</tr>
<tr>
<td>Control-K   </td>
<td>删除插入点与行或段落末尾处之间的文本。</td>
</tr>
<tr>
<td>Command-Delete  </td>
<td>在包含“删除”或“不存储”按钮的对话框中选择“删除”或“不存储”。</td>
</tr>
<tr>
<td>Fn–上箭头  </td>
<td>向上翻页：向上滚动一页。</td>
</tr>
<tr>
<td>Fn–下箭头  </td>
<td>向下翻页：向下滚动一页。</td>
</tr>
<tr>
<td>Fn–左箭头  </td>
<td>开头：滚动到文稿开头。</td>
</tr>
<tr>
<td>Fn–右箭头  </td>
<td>结尾：滚动到文稿末尾。</td>
</tr>
<tr>
<td>Command–上箭头 </td>
<td>将插入点移至文稿开头。</td>
</tr>
<tr>
<td>Command–下箭头 </td>
<td>将插入点移至文稿末尾。</td>
</tr>
<tr>
<td>Command–左箭头 </td>
<td>将插入点移至当前行的行首。</td>
</tr>
<tr>
<td>Command–右箭头 </td>
<td>将插入点移至当前行的行尾。</td>
</tr>
<tr>
<td>Option–左箭头  </td>
<td>将插入点移至上一字词的词首。</td>
</tr>
<tr>
<td>Option–右箭头  </td>
<td>将插入点移至下一字词的词尾。</td>
</tr>
<tr>
<td>Command–Shift–上箭头 </td>
<td>选中插入点与文稿开头之间的文本。</td>
</tr>
<tr>
<td>Command–Shift–下箭头 </td>
<td>选中插入点与文稿末尾之间的文本。</td>
</tr>
<tr>
<td>Command–Shift–左箭头 </td>
<td>选中插入点与当前行行首之间的文本。</td>
</tr>
<tr>
<td>Command–Shift–右箭头 </td>
<td>选中插入点与当前行行尾之间的文本。</td>
</tr>
<tr>
<td>Shift–上箭头   </td>
<td>将文本选择范围扩展到上一行相同水平位置的最近字符处。</td>
</tr>
<tr>
<td>Shift–下箭头   </td>
<td>将文本选择范围扩展到下一行相同水平位置的最近字符处。</td>
</tr>
<tr>
<td>Shift–左箭头   </td>
<td>将文本选择范围向左扩展一个字符。</td>
</tr>
<tr>
<td>Shift–右箭头   </td>
<td>将文本选择范围向右扩展一个字符。</td>
</tr>
<tr>
<td>Shift–Option–上箭头  </td>
<td>将文本选择范围扩展到当前段落的段首，再按一次则扩展到下一段落的段首。</td>
</tr>
<tr>
<td>Shift–Option–下箭头  </td>
<td>将文本选择范围扩展到当前段落的段尾，再按一次则扩展到下一段落的段尾。</td>
</tr>
<tr>
<td>Shift–Option–左箭头  </td>
<td>将文本选择范围扩展到当前字词的词首，再按一次则扩展到后一字词的词首。</td>
</tr>
<tr>
<td>Shift–Option–右箭头  </td>
<td>将文本选择范围扩展到当前字词的词尾，再按一次则扩展到后一字词的词尾。</td>
</tr>
<tr>
<td>Control-A   </td>
<td>移至行或段落的开头。</td>
</tr>
<tr>
<td>Control-E   </td>
<td>移至行或段落的末尾。</td>
</tr>
<tr>
<td>Control-F   </td>
<td>向前移动一个字符。</td>
</tr>
<tr>
<td>Control-B   </td>
<td>向后移动一个字符。</td>
</tr>
<tr>
<td>Control-L   </td>
<td>将光标或所选内容置于可见区域中央。</td>
</tr>
<tr>
<td>Control-P   </td>
<td>上移一行。</td>
</tr>
<tr>
<td>Control-N   </td>
<td>下移一行。</td>
</tr>
<tr>
<td>Control-O   </td>
<td>在插入点后插入一行。</td>
</tr>
<tr>
<td>Control-T   </td>
<td>将插入点后面的字符与插入点前面的字符交换。</td>
</tr>
<tr>
<td>Command–左花括号 ({)  </td>
<td>左对齐。</td>
</tr>
<tr>
<td>Command–右花括号 (})  </td>
<td>右对齐。</td>
</tr>
<tr>
<td>Command–Shift–竖线 (|)   </td>
<td>居中对齐。</td>
</tr>
<tr>
<td>Command-Option-F    </td>
<td>前往搜索栏。</td>
</tr>
<tr>
<td>Command-Option-T    </td>
<td>显示或隐藏 app 中的工具栏。</td>
</tr>
<tr>
<td>Command-Option-C    </td>
<td>拷贝样式：将所选项的格式设置拷贝到剪贴板。</td>
</tr>
<tr>
<td>Command-Option-V    </td>
<td>粘贴样式：将拷贝的样式应用到所选项。</td>
</tr>
<tr>
<td>Command-Shift-Option-V  </td>
<td>粘贴并匹配样式：将周围内容的样式应用到粘贴在该内容中的项目。</td>
</tr>
<tr>
<td>Command-Option-I    </td>
<td>显示或隐藏检查器窗口。</td>
</tr>
<tr>
<td>Command-Shift-P </td>
<td>页面设置：显示用于选择文稿设置的窗口。</td>
</tr>
<tr>
<td>Command-Shift-S </td>
<td>显示“存储为”对话框或复制当前文稿。</td>
</tr>
<tr>
<td>Command–Shift–减号 (-) </td>
<td>缩小所选项。</td>
</tr>
<tr>
<td>Command–Shift–加号 (+) </td>
<td>放大所选项。Command–等号 (=) 可执行相同的功能。</td>
</tr>
<tr>
<td>Command–Shift–问号 (?) </td>
<td>打开“帮助”菜单。</td>
</tr>
</tbody>
</table>


<p><br></p>

<h3>Finder快捷键</h3>

<table>
<thead>
<tr>
<th>快捷键 </th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Command-D   </td>
<td>复制所选文件。</td>
</tr>
<tr>
<td>Command-E   </td>
<td>推出所选磁盘或宗卷。</td>
</tr>
<tr>
<td>Command-F   </td>
<td>在 Finder 窗口中开始 Spotlight 搜索。</td>
</tr>
<tr>
<td>Command-I   </td>
<td>显示所选文件的“显示简介”窗口。</td>
</tr>
<tr>
<td>Command-Shift-C </td>
<td>打开“电脑”窗口。</td>
</tr>
<tr>
<td>Command-Shift-D </td>
<td>打开“桌面”文件夹。</td>
</tr>
<tr>
<td>Command-Shift-F </td>
<td>打开“我的所有文件”窗口。</td>
</tr>
<tr>
<td>Command-Shift-G </td>
<td>打开“前往文件夹”窗口。</td>
</tr>
<tr>
<td>Command-Shift-H </td>
<td>打开当前 OS X 用户帐户的“个人”文件夹。</td>
</tr>
<tr>
<td>Command-Shift-I </td>
<td>打开 iCloud Drive。</td>
</tr>
<tr>
<td>Command-Shift-K </td>
<td>打开“网络”窗口。</td>
</tr>
<tr>
<td>Command-Option-L    </td>
<td>打开“下载”文件夹。</td>
</tr>
<tr>
<td>Command-Shift-O </td>
<td>打开“文稿”文件夹。</td>
</tr>
<tr>
<td>Command-Shift-R </td>
<td>打开“AirDrop”窗口。</td>
</tr>
<tr>
<td>Command-Shift-U </td>
<td>打开“实用工具”文件夹。</td>
</tr>
<tr>
<td>Command-Option-D    </td>
<td>显示或隐藏 Dock。即使您未打开 Finder，此快捷键通常也有效。</td>
</tr>
<tr>
<td>Command-Control-T   </td>
<td>将所选项添加到边栏（OS X Mavericks 或更高版本）。</td>
</tr>
<tr>
<td>Command-Option-P    </td>
<td>隐藏或显示 Finder 窗口中的路径栏。</td>
</tr>
<tr>
<td>Command-Option-S    </td>
<td>隐藏或显示 Finder 窗口中的边栏。</td>
</tr>
<tr>
<td>Command–斜线 (/)    </td>
<td>隐藏或显示 Finder 窗口中的状态栏。</td>
</tr>
<tr>
<td>Command-J   </td>
<td>调出“显示”选项。</td>
</tr>
<tr>
<td>Command-K   </td>
<td>打开“连接服务器”窗口。</td>
</tr>
<tr>
<td>Command-L   </td>
<td>为所选项制作替身。</td>
</tr>
<tr>
<td>Command-N   </td>
<td>打开一个新的 Finder 窗口。</td>
</tr>
<tr>
<td>Command-Shift-N </td>
<td>新建文件夹。</td>
</tr>
<tr>
<td>Command-Option-N    </td>
<td>新建智能文件夹。</td>
</tr>
<tr>
<td>Command-R   </td>
<td>显示所选替身的原始文件。</td>
</tr>
<tr>
<td>Command-T   </td>
<td>在当前 Finder 窗口中打开单个标签时显示或隐藏标签栏。</td>
</tr>
<tr>
<td>Command-Shift-T </td>
<td>显示或隐藏 Finder 标签。</td>
</tr>
<tr>
<td>Command-Option-T    </td>
<td>在当前 Finder 窗口中打开单个标签时显示或隐藏工具栏。</td>
</tr>
<tr>
<td>Command-Option-V    </td>
<td>移动：将剪贴板中的文件从其原始位置移动到当前位置。</td>
</tr>
<tr>
<td>Command-Option-Y    </td>
<td>显示所选文件的快速查看幻灯片显示。</td>
</tr>
<tr>
<td>Command-Y   </td>
<td>使用“快速查看”预览所选文件。</td>
</tr>
<tr>
<td>Command-1   </td>
<td>以图标方式显示 Finder 窗口中的项目。</td>
</tr>
<tr>
<td>Command-2   </td>
<td>以列表方式显示 Finder 窗口中的项目。</td>
</tr>
<tr>
<td>Command-3   </td>
<td>以分栏方式显示 Finder 窗口中的项目。</td>
</tr>
<tr>
<td>Command-4   </td>
<td>以 Cover Flow 方式显示 Finder 窗口中的项目。</td>
</tr>
<tr>
<td>Command–左中括号 ([)  </td>
<td>前往上一文件夹。</td>
</tr>
<tr>
<td>Command–右中括号 (])  </td>
<td>前往下一文件夹。</td>
</tr>
<tr>
<td>Command–上箭头 </td>
<td>打开包含当前文件夹的文件夹。</td>
</tr>
<tr>
<td>Command–Control–上箭头   </td>
<td>在新窗口中打开包含当前文件夹的文件夹。</td>
</tr>
<tr>
<td>Command–下箭头 </td>
<td>打开所选项。</td>
</tr>
<tr>
<td>Command–Mission Control   </td>
<td>显示桌面。即使您未打开 Finder，此快捷键也有效。</td>
</tr>
<tr>
<td>Command–调高亮度  </td>
<td>打开或关闭目标显示器模式。</td>
</tr>
<tr>
<td>Command–调低亮度  </td>
<td>当 Mac 连接到多个显示器时打开或关闭显示器镜像功能。</td>
</tr>
<tr>
<td>右箭头   </td>
<td>打开所选文件夹。此快捷键仅在列表视图中有效。</td>
</tr>
<tr>
<td>左箭头   </td>
<td>关闭所选文件夹。此快捷键仅在列表视图中有效。</td>
</tr>
<tr>
<td>Option-连按 </td>
<td>在单独窗口中打开文件夹，并关闭当前窗口。</td>
</tr>
<tr>
<td>Command-连按 </td>
<td>在单独标签或窗口中打开文件夹。</td>
</tr>
<tr>
<td>Command-Delete  </td>
<td>将所选项移到废纸篓。</td>
</tr>
<tr>
<td>Command-Shift-Delete    </td>
<td>清倒废纸篓。</td>
</tr>
<tr>
<td>Command-Shift-Option-Delete </td>
<td>清倒废纸篓（不显示确认对话框）。</td>
</tr>
<tr>
<td>Command-Y   </td>
<td>使用“快速查看”预览文件。</td>
</tr>
<tr>
<td>Option–调高亮度   </td>
<td>打开“显示器”偏好设置。此快捷键可与任一亮度键搭配使用。</td>
</tr>
<tr>
<td>Option–Mission Control    </td>
<td>打开“Mission Control”偏好设置。</td>
</tr>
<tr>
<td>Option–调高音量   </td>
<td>打开“声音”偏好设置。此快捷键可与任一音量键搭配使用。</td>
</tr>
<tr>
<td>拖移时按 Command 键    </td>
<td>将拖移的项目移到其他宗卷或位置。拖移项目时指针会随之变化。</td>
</tr>
<tr>
<td>拖移时按 Option 键  </td>
<td>拷贝拖移的项目。拖移项目时指针会随之变化。</td>
</tr>
<tr>
<td>拖移时按 Command-Option </td>
<td>为拖移的项目制作替身。拖移项目时指针会随之变化。</td>
</tr>
<tr>
<td>Option-点按伸缩三角形    </td>
<td>打开所选文件夹内的所有文件夹。此快捷键仅在列表视图中有效。</td>
</tr>
<tr>
<td>Command-点按窗口标题  </td>
<td>查看包含当前文件夹的文件夹。</td>
</tr>
</tbody>
</table>


<p><br></p>

<p>原文档：<a href="https://support.apple.com/zh-cn/HT201236">Mac 键盘快捷键</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[全装独角兽高达]]></title>
    <link href="http://outprog.github.io/blog/2015/10/09/du-jiao-shou-gao-da/"/>
    <updated>2015-10-09T00:05:40+08:00</updated>
    <id>http://outprog.github.io/blog/2015/10/09/du-jiao-shou-gao-da</id>
    <content type="html"><![CDATA[<p>前段时间去日本旅行，买了两套高达模型</p>

<p>今天终于完成了这套700多个零件的全装独角兽（只是素组）</p>

<p>全装独角兽，顾名思义就是包含所有装备的独角兽高达。我组的这套是 MG 级别的独角兽，机体分为两种模式，一种独角兽模式（纯白），一种高达模式（露出绿色的精神感应框架，又称为爆甲）。组装完成后机体可以任意变换两种模式。</p>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151009/u-2.jpg"></p>

<p>左边为独角兽模式，右边为爆甲模式。下面再上几张图：</p>

<!--more-->


<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151009/u-0.jpg"></p>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151009/u-1.jpg"></p>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20151009/u-3.jpg"></p>

<h3>高达模型的一些基本词汇：</h3>

<ul>
<li>素组：只对模型进行拼装，不对模型进行贴纸、上色和喷涂</li>
<li>勾线：使用专用勾线笔对模型缝隙阴影部位进行勾涂，使模型更具有立体效果</li>
<li>水口：模型零件从板件上剪下时留下的不平整多余部分</li>
</ul>


<h3>高达模型几个主要等级</h3>

<ul>
<li>PG(PERFECT GRADE)完美级系列：比例为1:60，30cm左右，精细度较高，活动关节灵活。但价格昂贵，零件最多，适合高手，有骨架。</li>
<li>MG(MASTER GRADE)大师级系列：比例为1:100，18cm左右，外形精细，活动关节完美。零件多，盒子大，适合老手，有骨架。</li>
<li>RG(REAL GRADE)真实系列：比例为1:144，与HG一样大，外形完美，活动关节较好。零件中等，盒子小，适合老手，比较帅，有骨架，但是只出了几部机体。</li>
<li>HG(HIGH GRADE)高级系列：比例为1:144，13cm左右，外形较好，活动关节中等。零件不多，盒子小，比较大众化，适合新手，HG中少数部位有骨架，大多数空心。</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于写代码]]></title>
    <link href="http://outprog.github.io/blog/2015/09/29/guan-yu-xie-dai-ma/"/>
    <updated>2015-09-29T17:15:06+08:00</updated>
    <id>http://outprog.github.io/blog/2015/09/29/guan-yu-xie-dai-ma</id>
    <content type="html"><![CDATA[<p>对于写代码哪些事情，还有太多要去学习的东西。没有摸索过设计模式，没有重构过太多东西，优美的代码艺术更是谈不上，只是简单的写写而已。</p>

<p>写过各种排序，写过树，写过神经网络，在算法的世界，一切都让人感到惊奇。去九度刷过题，废寝忘食，也去 Codewars 刷过 star，跻身排行榜。解决各种问题，获得各种成就，一切不为别的，就像是一个又一个游戏关卡，只为过关获取成就。</p>

<p>写过 C，写过 C++，写过 PHP，写过 JAVA，写过 R，写过 Javascript，写过 Ruby，写过 shell，最近，还写写 Swift。C/C++ 纠结的指针，C++ 的继承、派生、多态、虚函数、运算符重载各种特性绕脑。写过 Ruby 后，才真是不想再写其他语言了，但是仍然避免不了用各种语言，历史上的架构原因，不同语言开发的优秀工具，都必须在特定语言环境下使用。然而各种语言，毕竟殊途同归。</p>

<p>写代码，要么往上写，要么往下写。所谓往上写，就是去注重代码质量，注重抽象、设计和性能，注重一切工程上的问题；所谓往下写，就是去理解语言的魅力，理解语言的实现，理解语言和计算这门艺术。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《计算的本质:深入剖析程序和计算机》第一部分总结]]></title>
    <link href="http://outprog.github.io/blog/2015/09/17/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji--di-yi-bu-fen-zong-jie/"/>
    <updated>2015-09-17T23:58:48+08:00</updated>
    <id>http://outprog.github.io/blog/2015/09/17/ji-suan-de-ben-zhi-shen-ru-pou-xi-cheng-xu-he-ji-suan-ji--di-yi-bu-fen-zong-jie</id>
    <content type="html"><![CDATA[<p>大学时对计算理论知之甚少，计算理论、编译原理都是为了应试而学，所用的课本也纯粹是乏味的理论，让人很难提起兴趣。而国外一些权威课本，可能知识总结不算精粹，讲解过程也掺杂着各种比喻，甚至是“过多”的讲述背景故事，但若是真的对这门学科感兴趣，这样的课本也许才是更好的选择。学习这样的课本，不仅仅能让人理解理论知识，更能了解这些理论知识的由来和意义。</p>

<p>好了，废话不多说。读完第一部分-程序和机器，稍作概述：</p>

<!--more-->


<h3>确定性有限自动机</h3>

<p>确定性有限自动机有若干状态，其中包括开始状态和接受状态（结束状态）。通过接收某个字符，使自动机的状态进行转换。接收指定的字符可以使自动机达到最终的接受状态，其他字符则可能永远无法达到接受状态。</p>

<p>确定性有限自动机在读入字符的时候，最终所处的状态一定是完全确定的，它不存在冲突也没有遗漏。</p>

<h3>非确定性有限自动机</h3>

<p>非确定性有限自动机去除了确定性有限自动机的确定性约束。</p>

<p>非确定性有限自动机可以同一时刻处于多个状态，它在进行某个字符读取时，可能处于状态2，也可能处于状态3。对这些可能的状态都应该进行记录。当非确定有限自动机同一时刻的状态中，存在一个接受状态时，该机器就认为接受读取到的字符串。</p>

<h3>确定性下推自动机</h3>

<p>下推自动机是在有限自动机的基础上进行了功能扩展。下推自动机主要是对存储部分进行了扩展，增加了一个栈对读取的字符进行弹入弹出操作。</p>

<p>确定性下推自动机的约束是“不能存在冲突”：不能在任何状态上，由于冲突的规则而使机器的状态在下一次移动中有二意性。</p>

<p>确定性下推自动机可以做括号匹配，能识别例如"(())()()(()())&ldquo;这样的字符串，进行这样的字符串识别的时候，可以认为读取&rdquo;(&ldquo;时进行入栈操作，读取&rdquo;)&ldquo;时进行出栈。但是这样的计算仍然很有局限性，因为他的栈其实只是一个计数器，并且它的规则只区分“栈为空”或“栈不为空”。因此想用用确定性下推自动机做回文识别是很困难的。</p>

<h3>非确定性下推自动机</h3>

<p>为突破确定性下推自动机的局限，使下推自动机能识别回文，我们可以去掉下推自动机的确定性约束。没有确定性约束的下推自动机，顾名思义就叫做非确定性下推自动机。</p>

<p>一台非确定性下推自动机会记录同时存在的多种状态，每个状态也有自己的存储栈。当非确定性下推自动机识别字符串时，其中某条状态转换为接受状态，就认为该字符串是可识别的。</p>

<p>非确定性下推自动机和确定性下推自动机是不等价的，非确定性下推自动机不能转化成确定性下推自动机，因为非确定下推自动机的每种可能状态都有自身的栈信息，确定性下推自动机无法把所有可能的栈组合成一个栈。</p>

<h3>图灵机</h3>

<p>将一条无限长的纸带穿过黑盒子，黑盒子可以左右移动纸带并修改在黑盒子中那部分纸带上的内容（擦除原有内容，再写入新的内容），黑盒子内部可以存储某些状态。图灵机的运作步骤如下：</p>

<pre><code>1. 黑盒子对纸带上的内容进行读取，读取的内容可能会改变黑盒子的内部状态
2. 黑盒子根据最新的内部状态，对纸带进行写入和移动
3. 当完成移动后，纸带原先的部分必定移出黑盒子，另外一部分会进入黑盒子，回到步骤1，黑盒子对新进入的纸带重复以上操作。
</code></pre>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20150917/turing-machine.jpg"></p>

<p>图灵机是目前为止最全能的计算机器，只需要通过以上简单的原理，可以实现任何现代计算机的计算功能。图灵机在添加一些附加功能（比如存储、子例程、多条纸带）后，可以提升一定的便捷性，但是不不能提升自身的计算能力。</p>

<p>存在一种通用图灵机（UTM，Universal Turing Machine），它可以在自身的纸带上模拟出任何一种图灵机，包括通用图灵机。通俗的说就是可以在图灵机上面模拟出一台虚拟的图灵机，这台虚拟的图灵机上还可以模拟出图灵机。</p>

<hr />

<p>不得不感叹这些先贤们惊人的创造力！乍一看我们日常使用的计算机和这些理论相去甚远。很难想象我们使用的复杂计算机就是在这些基础理论上一点一滴的建立起来的。</p>

<p>作为一名 WEB 开发人员，可能研究这些理论并没有多大的作用。现代高级编程技术让我们不需要任何底层理论就能写出出色的程序，但是求知欲不会停止，想去探索就应该去探索。有句话说得好——如果你想从头开始制作苹果派，必须先创造整个宇宙。</p>

<p>认真去做一件事时，是需要某种信念的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Octopress创建博客, Google CDN被墙的解决办法]]></title>
    <link href="http://outprog.github.io/blog/2015/09/16/octopresschuang-jian-bo-ke/"/>
    <updated>2015-09-16T16:51:14+08:00</updated>
    <id>http://outprog.github.io/blog/2015/09/16/octopresschuang-jian-bo-ke</id>
    <content type="html"><![CDATA[<p>官方文档提供 Octopress 创建博客的基本步骤：<br/>
<a href="http://octopress.org/docs/">http://octopress.org/docs/</a></p>

<p>使用官方文档，创建过程还算比较顺利，很快就可以在 github 上运行起来，但是运行后，还是遇到了一个特别的问题：<br/>
国内被墙后无法加载 google 提供的 jquery 文件和字体文件，导致 blog 打开速度超慢</p>

<!--more-->


<h2>Google 被墙，无法加载指定 jquery 和字体</h2>

<p>由于天朝无所不能的墙的存在，我们甚至上个 blog 都得“翻一翻”，对我们技术人员“翻一翻”到是好说，可是很多普通老百姓还是很难实现“翻一翻”的。所以，我们的 blog 是需要避免这种尴尬的情形的。<br/>
当然，不仅仅是 blog，我们在使用一些国外优秀的前端页面时，也会遇到这种尴尬的情形。如果你发现你的页面需要很长的时间才能打开，那可能就是遇到了这个问题。</p>

<p>使用 Chrome 浏览器的 “Inspect Element”－“Network” 可以很方便的查看到被墙掉的文件：</p>

<p><img class="img-responsive" src="http://outprog.github.io/images/post/20150916/chrome_network_failed.png"></p>

<p>可以看出来，被墙文件的共同特点是路径名中都包含 googleapis.com, 很显然 googleapis.com 已经被墙掉，内网无法访问。现在要做的就是把这些墙掉的文件替换掉。回到 octopress 目录，使用如下命令查找文档中包含 &ldquo;googleapis.com&rdquo; 的文件：</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>find ./ -name "*" | xargs grep "googleapis.com"</span></code></pre></td></tr></table></div></figure>


<p>通过该命令，可以很方便的定位到文件夹中（包括子目录）哪些文档的内容包含某串字符。在这里，我们可以看到 public 和 source 文件夹中都有包含字符串 &ldquo;googleapis.com&rdquo; 的文件， public 中的文件是由 source 中的文件生成的，因此只需要更改 source 中的文件就可以。</p>

<p>这里我们只需要更改两个文件</p>

<p><em>source/_includes/head.html</em>
原文本</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p>替换后的文本（替换为 baidu cdn)</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script src="//libs.baidu.com/jquery/1.9.1/jquery.min.js"&gt;&lt;/script&gt;</span></code></pre></td></tr></table></div></figure>


<p><em>source/_includes/custom/head.html</em></p>

<p>这里我直接将所有内容注释掉了，当然你也可以翻 墙后把 google 提供的字体下载到 github 目录中，将此处的路径改为你的地址。</p>

<p>重新生成并部署，就不会遇到这个问题了。</p>

<p>ps: _config.yml 中 twitter 开启时也存在 twitter 需要翻墙连接的情况，把 twitter 关闭后可以解决。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[开启新的篇章]]></title>
    <link href="http://outprog.github.io/blog/2015/09/16/kai-qi-xin-de-pian-zhang/"/>
    <updated>2015-09-16T09:44:21+08:00</updated>
    <id>http://outprog.github.io/blog/2015/09/16/kai-qi-xin-de-pian-zhang</id>
    <content type="html"><![CDATA[<p>采用 Octopress 创建了这个 blog，发出第一篇帖子——'开启新的篇章'。</p>

<p>最后一次写 blog 已经是好几年前的事了。那时用的 MSN Space，拉了一堆朋友一起来写日志，写感概。而今 MSN 已退出历史的舞台。</p>

<p>现在重新开启 blog，是想给自己一个新的开始。工作两年过来，自己不像以前一样爱折腾了，轻松的工作也让心思有点懈怠，然而时间是不会等人的。有的人不知不觉就已年过三旬，有的人一直在等待，还有的人早就开始去做那些自己想做的事，远离那些消极与被动。所以，我觉得自己不能这样下去，更应该去做想做的事情。</p>

<p>这个 blog 是一个开始，记录下生活中有趣的点滴，总结一下遇到的问题。</p>
]]></content>
  </entry>
  
</feed>
